{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","account","useRef","balance","fundAmount","useState","refresh","setRefresh","fundWallet","a","reach","faucet","current","getBalance","getAccount","rawBalance","connectWallet","className","disabled","onClick","title","onChange","e","target","value","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"ilBA6EeA,MAzEf,WACE,IAAMC,EAAUC,mBACVC,EAAUD,mBACVE,EAAaF,mBACnB,EAA8BG,oBAAS,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KAOMC,EAAU,uCAAG,4BAAAC,EAAA,6DACjBF,GAAW,GADM,SAEIG,MAFJ,cAEXC,EAFW,gBAGXD,IACJC,EACAV,EAAQW,QACRF,IAAoBN,EAAWQ,UANhB,uBAQTC,IARS,OASfN,GAAW,GATI,2CAAH,qDAgBRO,EAAU,uCAAG,sBAAAL,EAAA,sEAAoCC,MAApC,gCAAYT,EAAQW,QAApB,mDAAH,qDACVC,EAAU,uCAAG,4BAAAJ,EAAA,sEAIQC,IAAgBT,EAAQW,SAJhC,OAIXG,EAJW,OAQjBZ,EAAQS,QAAUF,IAAqBK,EAAY,GARlC,2CAAH,qDAiBVC,EAAa,uCAAG,sBAAAP,EAAA,sEACdK,IADc,cAEpBP,GAAW,GAFS,SAGdM,IAHc,OAIpBN,GAAW,GAJS,2CAAH,qDAMnB,OACE,qBAAKU,UAAU,MAAf,SACCX,EAAU,0CACT,qCAEE,wBAAQY,UAAQ,EAACC,QAASH,EAA1B,4BACCf,EAAQW,QACP,qCACuB,OAApBT,EAAQS,QACL,8DAA0BT,EAAQS,YAClC,KACJ,uBACA,uBAAOQ,MAAM,cAAcC,SAAU,SAAAC,GAAC,OAAIlB,EAAWQ,QAAUU,EAAEC,OAAOC,SACxE,wBAAQL,QAASX,EAAjB,4BAEA,4DC1DCiB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.43c2ec91.chunk.js","sourcesContent":["import './App.css';\nimport * as reach from '@reach-sh/stdlib/ALGO';\nimport { useRef, useState } from 'react';\n\nfunction App() {\n  const account = useRef();\n  const balance = useRef();\n  const fundAmount = useRef();\n  const [refresh, setRefresh] = useState(false);\n  // helpers\n  /**\n   * Fund Wallet With TestNet Algo\n   * @async\n   * @fires setRefresh\n   */\n  const fundWallet = async () => {\n    setRefresh(true);\n    const faucet = await reach.getFaucet();\n    await reach.transfer(\n      faucet,\n      account.current,\n      reach.parseCurrency(fundAmount.current),\n      );\n      await getBalance();\n      setRefresh(false);\n    }\n    /**\n     * Get Account\n     * @async\n     * @returns {Promise} set current account to result of reach.getDefaultAccount()\n     */\n    const getAccount = async () => account.current = await reach.getDefaultAccount();\n    const getBalance = async () => {\n      /**\n       * balanceOf returns in microalgos\n       */\n      const rawBalance = await reach.balanceOf(account.current);\n      /**\n       * format microalgos to Algos & assign to current balance\n       */\n      balance.current = reach.formatCurrency(rawBalance, 4);\n    }\n    /**\n     * Connect to Wallet\n     * @async\n     * @fires getAccount\n     * @fires getBalance\n     * @fires setRefresh\n     */\n    const connectWallet = async () => {\n      await getAccount();\n      setRefresh(true);\n      await getBalance();\n      setRefresh(false);\n    }\n    return (\n      <div className=\"App\">\n      {refresh ? <div>Loading</div> : (\n        <>\n          {/* TODO: remove this when figure out how to deploy to actual test net */}\n          <button disabled onClick={connectWallet}>connect wallet</button>\n          {account.current ? (\n            <>\n              {balance.current !== null\n                ? <div>Current Balance: {`${balance.current}`}</div>\n                : null}\n              <br />\n              <input title=\"Fund Amount\" onChange={e => fundAmount.current = e.target.value} />\n              <button onClick={fundWallet}>fund wallet</button>\n            </>\n          ) : <div>No Wallet Connected</div>}\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}