{"version":3,"sources":["components/Theme.jsx","components/NavComponent.jsx","components/FooterComponent.jsx","utilities/algo.js","components/AssetListComponent.jsx","pages/LandingPage.jsx","utilities/displayAddress.js","utilities/formatUtil.js","pages/ProductPage.jsx","pages/ProfilePage.jsx","pages/AccountPage.jsx","App.js","reportWebVitals.js","index.js"],"names":["MainTheme","children","darkMode","useMediaQuery","theme","createTheme","palette","type","background","main","ThemeProvider","CssBaseline","useStyles","makeStyles","root","paddingLeft","spacing","paddingRight","weIn","display","flexDirection","justifyContent","shouldLogIn","margin","paddingTop","loggedIn","color","loggedOut","text","secondary","home","input","backgroundColor","padding","marginBottom","walletSelectionList","walletSelectionButton","generateLedgerOptions","options","oIndex","result","length","push","MenuItem","value","Nav","props","user","ledger","handleSelectLedgerChange","handleGetAccountInfo","handleSetAccount","useState","selectedWallet","setSelectedWallet","algoSignerWalletOptions","setAlgoSignerWalletOptions","classes","history","useHistory","handleConnectWalletSubmit","addr","a","updatedAccountInfo","handleGetAccountsAlgoSigner","AlgoSigner","connect","accounts","AppBar","position","className","Typography","Select","label","title","onChange","Button","variant","disabled","undefined","onClick","map","i","address","IconButton","edge","marginTop","icon","maxWidth","marginLeft","Footer","BottomNavigation","BottomNavigationAction","replace","waitForConfirmation","algodClient","trxId","status","do","lastRound","pendingTransactionInformation","pendingInfo","statusAfterBlock","createOptInTrx","algosdk","sender","params","asset","recipient","send","makeAssetTransferTxnWithSuggestedParams","index","console","error","getPureStakeAPIToken","env","REACT_APP_MAINNET_PURESTAKE_API_KEY","REACT_APP_TESTNET_PURESTAKE_API_KEY","REACT_APP_BETANET_PURESTAKE_API_KEY","alignItems","card","minWidth","cardActions","notSelectedWallet","opacity","AssetListComponent","assets","handleUpdateAccountInfo","assetIdList","page","setPage","activeAssetId","setActiveAssetId","handleGetAssetInfo","SigningMethods","handleAssetByAlgoSigner","handleAssetByMyAlgoConnect","CardContent","assetCollapse","setAssetCollapse","assetOptInCollaspe","setAssetOptInCollapse","setObtainAssetAmount","setObtainAssetNote","assetObtainCollaspe","setAssetObtainCollapse","assetRefresh","setAssetRefresh","algoSignerWallets","setAlgoSignerWallets","algoSignerWalletSelected","setAlgoSignerWalletSelected","activeAsset","setActiveAsset","userTotal","assetTotal","userAssetTotals","setUserAssetTotals","userOptedIn","setUserOptedIn","handleAssetRefresh","getTransactionParams","handleOptInAlgoSignerInput","handleOptIn","signMethod","optInTrx","base64Tx","encoding","msgpackToBase64","toByte","signTxn","txn","signedTx","tx","blob","submittedSignedTrx","txId","current","account","myAlgoConnect","MyAlgoConnect","disableLedgerNano","shouldSelectOneAccount","openManager","signTransaction","signedTrx","sendRawTransaction","txID","useEffect","getAssetInfo","id","assetInfo","String","total","Array","isArray","uAIndex","amount","getUserAssetAmount","assetId","userAssets","forEach","uAsset","userHasOptedInToAsset","Card","component","Paper","name","CardActions","TextField","e","target","handleObtainAssetAmountChange","placeholder","LinearProgress","Collapse","in","timeout","unmountOnExit","asW","Pagination","count","v","LandingPage","handleGetTransactionParams","setLedger","useRef","log","refresh","handleUpdatingAccountInfo","displayAddress","Object","keys","commaFormat","n","split","reverse","char","join","capitalize","s","substring","toUpperCase","header","top","deets","deetHeader","subheader","width","primary","borderRadius","boxShadow","topMobile","ProductPage","expandTL","setExpandTL","propInfo","location","state","activeProperty","mobile","goBack","style","propertyInfo","body","mobileTop","imgs","images","src","process","path","alt","Table","size","TableHead","TableRow","TableCell","Chip","vacant","TableBody","bath","bedrooms","propertyType","sqft","yearBuilt","numbers","noWrap","colSpan","tokenInfo","totalSold","investmentInfo","totalInvestment","totalAvailable","totalTokens","toFixed","Timeline","projectTimeline","sort","b","Date","date","tl","TimelineItem","TimelineOppositeContent","TimelineSeparator","TimelineDot","TimelineConnector","TimelineContent","Accordion","square","expanded","panel","newE","AccordionSummary","AccordionDetails","description","financialInfo","f","ProfilePage","setRefresh","setAssets","walletInput","setWalletInput","getWalletAssetsInfo","walletAddress","walletInfo","includes","assetInfoRes","Promise","all","assetInfoResResolved","handleSubmit","preventDefault","handleSignOut","message","onSubmit","Divider","AccountPage","App","setAccount","algodServer","setAlgodServer","indexerServer","setIndexerServer","token","setToken","setAlgodClient","indexerClient","setIndexerClient","REACT_APP_TESTNET_ALGOD_SERVER_URL","REACT_APP_MAINNET_ALGOD_SERVER_URL","REACT_APP_BETANET_ALGOD_SERVER_URL","getAlgoServer","REACT_APP_MAINNET_INDEXER_SERVER_URL","REACT_APP_TESTNET_INDEXER_SERVER_URL","REACT_APP_BETANET_INDEXER_SERVER_URL","getIndexerServer","Algodv2","Indexer","info","getAssetInformationByID","lookupAssetByID","getAccountInformationByID","lookupAccountByID","accountInfo","exact","render","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9ac61c5e.chunk.js","sourcesContent":["import React from 'react';\r\nimport { createTheme, ThemeProvider } from '@material-ui/core/styles';\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\n\r\n\r\nconst MainTheme = ({ children }) => {\r\n  const darkMode = useMediaQuery('(prefers-color-scheme: dark)');\r\n  \r\n  const theme = createTheme({\r\n    palette: {\r\n      type: darkMode ? 'dark' : 'light',\r\n      background: {\r\n        main: '#282c34',\r\n      },\r\n    },\r\n  });\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <CssBaseline />\r\n      {children}\r\n    </ThemeProvider>\r\n);\r\n}\r\n\r\nexport default MainTheme;\r\n","/* global AlgoSigner */\r\nimport React, { useState } from 'react';\r\nimport { useHistory } from 'react-router';\r\n// MUI\r\nimport { makeStyles } from '@material-ui/core';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport AccountCircle from '@material-ui/icons/AccountCircle';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    paddingLeft: theme.spacing(2),\r\n    paddingRight: theme.spacing(2),\r\n  },\r\n  weIn: {\r\n    display: 'flex',\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n  },\r\n  shouldLogIn: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    margin: 'auto',\r\n    paddingTop: theme.spacing(1),\r\n  },\r\n  loggedIn: {\r\n    color: '#242729',\r\n  },\r\n  loggedOut: {\r\n    color: theme.palette.text.secondary,\r\n  },\r\n  home: {\r\n    color: theme.palette.text.secondary,\r\n  },\r\n  input: {\r\n    backgroundColor: theme.palette.background.main,\r\n    padding: theme.spacing(1),\r\n    marginBottom: theme.spacing(1),\r\n  },\r\n  walletSelectionList: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n  },\r\n  walletSelectionButton: {\r\n    marginBottom: theme.spacing(1),\r\n  },\r\n}));\r\n/**\r\n * Generate Ledger Options\r\n * @param {Array} options which ledgers to support\r\n * @returns {Array} MenuItem array with given options as values\r\n */\r\nconst generateLedgerOptions = (options) => {\r\n  let oIndex = 0;\r\n  const result = [];\r\n  while (oIndex < options?.length) {\r\n    result.push(\r\n      <MenuItem\r\n        value={options[oIndex]}\r\n      >\r\n        {options[oIndex]}\r\n      </MenuItem>\r\n    );\r\n    oIndex += 1;\r\n  }\r\n  return result;\r\n};\r\n\r\nconst Nav = (props) => {\r\n  // user obj\r\n  const {\r\n    user,\r\n    ledger,\r\n    handleSelectLedgerChange,\r\n    handleGetAccountInfo,\r\n    handleSetAccount,\r\n  } = props;\r\n  const [selectedWallet, setSelectedWallet] = useState('');\r\n  const [algoSignerWalletOptions, setAlgoSignerWalletOptions] = useState(null);\r\n\r\n  // css\r\n  const classes = useStyles();\r\n  // to redirect\r\n  const history = useHistory();\r\n  // redirect handlers\r\n  const handleHomeRedirect = () => history.push('/reach_for_algo');\r\n  const handleProfileRedirect = () => history.push('/profile');\r\n  /**\r\n   * Handle Connect Wallet Submit\r\n   * @async\r\n   * @param {String} addr wallet address to update with\r\n   * @fires setSelectedWallet to given address\r\n   * @fires handleSetAccount with updated account info\r\n   */\r\n  const handleConnectWalletSubmit = async (addr) => {\r\n    // update account into\r\n    setSelectedWallet(addr);\r\n    const updatedAccountInfo = await handleGetAccountInfo(addr);\r\n    handleSetAccount(updatedAccountInfo);\r\n  };\r\n  /**\r\n   * Handle Get Accounts To Select From Algo Signer\r\n   * @async\r\n   * @fires setAlgoSignerWalletOptions\r\n   */\r\n  const handleGetAccountsAlgoSigner = async () => {\r\n    await AlgoSigner?.connect();\r\n    const accounts = await AlgoSigner?.accounts({\r\n      ledger,\r\n    });\r\n    setAlgoSignerWalletOptions(accounts);\r\n  };\r\n\r\n  return (\r\n    <AppBar\r\n      position=\"static\"\r\n      className={classes.root}\r\n    >\r\n      {user === null\r\n        ? (\r\n          <div className={classes.shouldLogIn}>\r\n            {/* TODO: When / if redesign, if wallet & net based,\r\n              implement workflow to capture relevant info */}\r\n            <Typography>Choose Ledger</Typography>\r\n            <Select\r\n              label=\"Ledger\"\r\n              title=\"Ledger\"\r\n              onChange={handleSelectLedgerChange}\r\n              value={ledger}\r\n              className={classes.input}\r\n            >\r\n              {generateLedgerOptions(['MainNet', 'TestNet', 'BetaNet'])}\r\n            </Select>\r\n            <Typography>Choose Wallet</Typography>\r\n            <div\r\n              className={`${classes.input} ${classes.walletSelectionList}`}\r\n            >\r\n              <Button\r\n                variant=\"outlined\"\r\n                color=\"primary\"\r\n                className={classes.walletSelectionButton}\r\n                disabled={AlgoSigner === undefined}\r\n                onClick={handleGetAccountsAlgoSigner}\r\n              >\r\n                AlgoSigner\r\n                {AlgoSigner === undefined ? ' not detected' : ''}\r\n              </Button>\r\n              <Button\r\n                variant=\"outlined\"\r\n                color=\"primary\"\r\n                className={classes.walletSelectionButton}\r\n              >\r\n                MyAlgo Connect\r\n              </Button>\r\n              <Button\r\n                variant=\"outlined\"\r\n                color=\"primary\"\r\n                disabled={true}\r\n              >\r\n                Algorand Mobile Wallet? (TODO)\r\n              </Button>\r\n            </div>\r\n            {algoSignerWalletOptions?.length > 0\r\n              ? (\r\n                <>\r\n                  <Typography>Available Wallets</Typography>\r\n                  <div className={`${classes.input} ${classes.walletSelectionList}`}>\r\n                    {algoSignerWalletOptions?.map(({ address }, i) => (\r\n                      <Button\r\n                        variant=\"outlined\"\r\n                        color={address === selectedWallet ? \"inherit\" : \"primary\"}\r\n                        className={i !== algoSignerWalletOptions?.length\r\n                          ? classes.walletSelectionButton : null}\r\n                        onClick={() => handleConnectWalletSubmit(address)}\r\n                      >\r\n                        {address}\r\n                      </Button>\r\n                    ))}\r\n                  </div>\r\n                </>\r\n              ) : null}\r\n            {/* <TextField\r\n              label=\"Wallet Address\"\r\n              value={walletInput}\r\n              onChange={handleWalletInputChange}\r\n              variant=\"outlined\"\r\n              className={classes.input}\r\n            />\r\n            <Button\r\n              onClick={handleConnectWalletSubmit}\r\n              variant=\"outlined\"\r\n              className={classes.input}\r\n            >\r\n              Begin\r\n            </Button> */}\r\n          </div>\r\n        ) : (\r\n          <div className={classes.weIn}>\r\n            <IconButton\r\n              edge=\"start\"\r\n              aria-label=\"home\"\r\n              onClick={handleHomeRedirect}\r\n              className={classes.home}\r\n            >\r\n              <HomeIcon />\r\n              {ledger?.length > 0 ? (\r\n                <Typography>\r\n                  {ledger}\r\n                </Typography>\r\n              ) : ''}\r\n            </IconButton>\r\n            <IconButton\r\n              aria-label=\"account of current user\"\r\n              aria-controls=\"menu-appbar\"\r\n              className={user === null\r\n                ? classes.loggedIn : classes.loggedOut}\r\n              aria-haspopup=\"true\"\r\n              onClick={handleProfileRedirect}\r\n              color=\"inherit\"\r\n            >\r\n              <AccountCircle />\r\n            </IconButton>\r\n          </div>\r\n        )}\r\n    </AppBar>\r\n  );\r\n};\r\n\r\nexport default Nav;\r\n","import React from 'react';\r\nimport { useHistory } from 'react-router';\r\n// MUI\r\nimport BottomNavigation from '@material-ui/core/BottomNavigation';\r\nimport BottomNavigationAction from '@material-ui/core/BottomNavigationAction';\r\nimport { makeStyles } from '@material-ui/core';\r\nimport IconButton from '@material-ui/core/IconButton';\r\n// Icons\r\nimport HomeIcon from '@material-ui/icons/Home';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n    flexDirection: 'row',\r\n    justifyContent: 'start',\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  icon: {\r\n    maxWidth: theme.spacing(5),\r\n    marginBottom: theme.spacing(1),\r\n    marginLeft: theme.spacing(-1),\r\n  },\r\n}));\r\n\r\nconst Footer = () => {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const handleHomeRedirect = () => history?.replace('/reach_for_algo');\r\n  return (\r\n    <BottomNavigation className={classes.root}>\r\n      <BottomNavigationAction\r\n        icon={<HomeIcon />}\r\n        className={classes.icon}\r\n        onClick={handleHomeRedirect}\r\n      />\r\n    </BottomNavigation>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","/**\r\n * Wait For Transaction Confirmation\r\n * @async\r\n * @param {Object} algodClient instance of algod client\r\n * @param {String | Number} trxId transaction id to look for\r\n * @returns {Object} the confirmation response object\r\n */\r\nconst waitForConfirmation = async (algodClient, trxId) => {\r\n  let lastRound = (await algodClient.status().do())['last-round'];\r\n  while (true) {\r\n    const pendingInfo = await algodClient.pendingTransactionInformation(trxId).do();\r\n    if (pendingInfo['confirmed-round'] !== null && pendingInfo['confirmed-round'] > 0) {\r\n      // transaction completed at pendingInfo['confirmed-round']\r\n      return pendingInfo;\r\n    }\r\n    lastRound += 1;\r\n    await algodClient.statusAfterBlock(lastRound).do();\r\n  }\r\n};\r\n/**\r\n * Create Opt In Transaction Object\r\n * @async\r\n * @param {Object} algosdk \r\n * @param {String} sender address string\r\n * @param {Object} params suggested params\r\n * @param {Object} asset asset to opt into\r\n * @returns {Promise} transfer transaction object\r\n */\r\n const createOptInTrx = async (algosdk, sender, params, asset) => {\r\n  try {\r\n    // for opt-in, sender & recipient will be the same address\r\n    const send = sender;\r\n    const recipient = send;\r\n    // We set revocationTarget to undefined as this is not a clawback operation\r\n    const revocationTarget = undefined;\r\n    // CloseReaminerTo is set to undefined as we are not closing out an asset\r\n    const closeRemainderTo = undefined;\r\n    const amount = 0;\r\n    // Construct transaction object\r\n    return await algosdk.makeAssetTransferTxnWithSuggestedParams(\r\n      send,\r\n      recipient,\r\n      closeRemainderTo,\r\n      revocationTarget,\r\n      amount,\r\n      undefined,\r\n      asset?.index,\r\n      params,\r\n    );\r\n  } catch (e) {\r\n    console.error(e);\r\n  }\r\n};\r\n/**\r\n * Get Algod Server Url\r\n * @param {String} ledger ledger option\r\n * @returns {String} appropriate string process env value if present\r\n */\r\nconst getAlgoServer = (ledger, env) => {\r\n  console.log(`get the algo server for ledger: ${ledger} | env: ${env.REACT_APP_TESTNET_ALGOD_SERVER_URL}`);\r\n  switch(ledger) {\r\n    case 'MainNet':\r\n      return env.REACT_APP_MAINNET_ALGOD_SERVER_URL;\r\n    case 'TestNet':\r\n      return env.REACT_APP_TESTNET_ALGOD_SERVER_URL;\r\n    case 'BetaNet':\r\n      return env.REACT_APP_BETANET_ALGOD_SERVER_URL;\r\n    default:\r\n      return '';\r\n  }\r\n}\r\n/**\r\n * Get Indexer Server Url\r\n * @param {String} ledger ledger option\r\n * @returns {String} appropriate string process env value if present\r\n */\r\nconst getIndexerServer = (ledger, env) => {\r\n  switch(ledger) {\r\n    case 'MainNet':\r\n      return env.REACT_APP_MAINNET_INDEXER_SERVER_URL;\r\n    case 'TestNet':\r\n      return env.REACT_APP_TESTNET_INDEXER_SERVER_URL;\r\n    case 'BetaNet':\r\n      return env.REACT_APP_BETANET_INDEXER_SERVER_URL;\r\n    default:\r\n      return '';\r\n  }\r\n}\r\n/**\r\n * Get Appropriate PureStake API Key\r\n * @param {String} ledger ledger option\r\n * @returns {String} appropriate string process env value if present\r\n */\r\nconst getPureStakeAPIToken = (ledger, env) => {\r\n  switch(ledger) {\r\n    case 'MainNet':\r\n      return env.REACT_APP_MAINNET_PURESTAKE_API_KEY;\r\n    case 'TestNet':\r\n      return env.REACT_APP_TESTNET_PURESTAKE_API_KEY;\r\n    case 'BetaNet':\r\n      return env.REACT_APP_BETANET_PURESTAKE_API_KEY;\r\n    default:\r\n      return '';\r\n  }\r\n}\r\n\r\nexport {\r\n  waitForConfirmation,\r\n  createOptInTrx,\r\n  getAlgoServer,\r\n  getIndexerServer,\r\n  getPureStakeAPIToken,\r\n};\r\n","/* global AlgoSigner */\r\n// React\r\nimport React, { useState, useEffect } from 'react';\r\n// MyAglo\r\nimport MyAlgoConnect from '@randlabs/myalgo-connect';\r\n// MUI\r\nimport Card from '@material-ui/core/Card';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/styles';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport Pagination from '@material-ui/lab/Pagination';\r\n// Icons\r\nimport LockIcon from '@material-ui/icons/Lock';\r\nimport LockOpenIcon from '@material-ui/icons/LockOpen';\r\nimport ExpandLessIcon from '@material-ui/icons/ExpandLess';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\n// Utilities\r\nimport {\r\n  waitForConfirmation,\r\n  createOptInTrx,\r\n} from '../utilities/algo';\r\n// import { createOptInTrx } from '../utilities/createOptInTrx';\r\n// Classes\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n  },\r\n  card: {\r\n    maxWidth: theme.spacing(50),\r\n    minWidth: theme.spacing(30),\r\n  },\r\n  cardActions: {\r\n    display: 'flex',\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n    padding: `0px ${theme.spacing(1)}px`,\r\n  },\r\n  notSelectedWallet: {\r\n    opacity: '75%',\r\n  },\r\n}));\r\n\r\nconst INITOBTAINASSETAMOUNT = 0;\r\nconst INITOBTAINASSETNOTE = '';\r\n\r\nconst AssetListComponent = (props) => {\r\n  const {\r\n    assets,\r\n    algodClient,\r\n    user,\r\n    algosdk,\r\n    handleUpdateAccountInfo,\r\n    assetIdList,\r\n    page,\r\n    setPage,\r\n    activeAssetId,\r\n    setActiveAssetId,\r\n    handleGetAssetInfo,\r\n  } = props;\r\n  const classes = useStyles();\r\n\r\n  const SigningMethods = (props) => {\r\n    const {\r\n      handleAssetByAlgoSigner,\r\n      handleAssetByMyAlgoConnect\r\n    } = props;\r\n    return (\r\n      <CardContent>\r\n        <Typography>\r\n          Transaction Signing Methods:\r\n        </Typography>\r\n        <Button\r\n          disabled={AlgoSigner === undefined || AlgoSigner === null}\r\n          onClick={() => handleAssetByAlgoSigner()}\r\n          variant=\"contained\"\r\n        >\r\n          AlgoSigner\r\n        </Button>\r\n        <Button\r\n          onClick={() => handleAssetByMyAlgoConnect()}\r\n          variant=\"contained\"\r\n        >\r\n          My Algo Conect\r\n        </Button>\r\n      </CardContent>\r\n    );\r\n  }\r\n  /**\r\n   * Generate Initial Asset State Object\r\n   * @param {Boolean | String | Number} initialState value\r\n   * @returns {Object} keys as asset index and passed value\r\n   */\r\n  const initAssetState = (initialState) => {\r\n    let result = {};\r\n    if (Array.isArray(assets) && assets?.length > 0) {\r\n      assets?.forEach(({ asset }) => {\r\n        result = {\r\n          ...result,\r\n          [`${asset?.index}`]: initialState,\r\n        }\r\n      });\r\n    }\r\n    return result;\r\n  }\r\n  const [assetCollapse, setAssetCollapse] = useState(false);\r\n  const [assetOptInCollaspe, setAssetOptInCollapse] = useState(false);\r\n  const [obtainAssetAmount, setObtainAssetAmount] = useState(INITOBTAINASSETAMOUNT);\r\n  const [obtainAssetNote, setObtainAssetNote] = useState(INITOBTAINASSETNOTE);\r\n  const [assetObtainCollaspe, setAssetObtainCollapse] = useState(false);\r\n  const [assetRefresh, setAssetRefresh] = useState(false);\r\n  const [algoSignerWallets, setAlgoSignerWallets] = useState(null);\r\n  const [algoSignerWalletSelected, setAlgoSignerWalletSelected] = useState(null);\r\n  const [activeAsset, setActiveAsset] = useState(null);\r\n  const [userAssetTotals, setUserAssetTotals] = useState({\r\n    userTotal: 0,\r\n    assetTotal: 0,\r\n  });\r\n  const [userOptedIn, setUserOptedIn] = useState(false);\r\n  /**\r\n   * Handle Toggle Asset Collapse At Index Given\r\n   * @param {number} index the numerical index of the ASA\r\n   * @returns {null}\r\n   * @fires setAssetCollapse update attribute at passed index\r\n   */\r\n  const handleToggleAssetCollapse = () => setAssetCollapse(!assetCollapse);\r\n  const handleToggleOptInCollapse = () => setAssetOptInCollapse(!assetOptInCollaspe);\r\n  const handleToggleObtainAssetCollapse = (index) => setAssetObtainCollapse(!assetObtainCollaspe);\r\n\r\n  const handleObtainAssetAmountChange = (e) => {\r\n    if (+e.target.value <= activeAsset?.params?.total) {\r\n      setObtainAssetAmount(+e.target.value);\r\n    }\r\n  }\r\n  const handleAssetRefresh = (index, value) => {\r\n    setAssetRefresh({\r\n      ...assetRefresh,\r\n      [index]: value,\r\n    });\r\n  }\r\n  const handleObtainAssetNoteChange = (e) => {\r\n    setObtainAssetNote(e.target.value);\r\n  }\r\n  /**\r\n   * Get Transaction Parameters\r\n   * @async\r\n   * @returns {Promise} algoClient.getTransactionParams().do()\r\n   */\r\n   const getTransactionParams = async () => {\r\n    try {\r\n      return await algodClient.getTransactionParams().do();\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n  }\r\n  const handleOptInAssetByMnemonic = async (asset) => {\r\n    if (user.current === undefined) {\r\n      alert('Please sign in before opting in');\r\n      return null;\r\n    }\r\n    handleAssetRefresh(asset?.index, true);\r\n    try {\r\n      const params = await getTransactionParams();\r\n      // for opt-in, sender & recipient will be the same address\r\n      const sender = user.current.account.address;\r\n      const recipient = sender;\r\n      // We set revocationTarget to undefined as this is not a clawback operation\r\n      const revocationTarget = undefined;\r\n      // CloseReaminerTo is set to undefined as we are not closing out an asset\r\n      const closeRemainderTo = undefined;\r\n      const amount = 0;\r\n      // Construct transaction object\r\n      const optinTxn = algosdk.makeAssetTransferTxnWithSuggestedParams(\r\n        sender,\r\n        recipient,\r\n        closeRemainderTo,\r\n        revocationTarget,\r\n        amount,\r\n        undefined,\r\n        asset?.index,\r\n        params,\r\n      );\r\n      // Prompt user for mnemonic so we can sign with sk\r\n      const account = algosdk.mnemonicToSecretKey(prompt('Please enter your secret mnemonic:'));\r\n      console.log('account from mnemonic: ', account);\r\n\r\n      const rawSignedTxn = optinTxn.signTxn(account?.sk);\r\n      const txId = optinTxn.txID().toString();\r\n      console.log('Singed transaction with txId: %s', txId);\r\n      // submit transaction\r\n      const trxSubmission = await algodClient.sendRawTransaction(rawSignedTxn).do();\r\n      console.log('the transaction submission: ', trxSubmission);\r\n      // Wait for confirmation\r\n      const confirmedTrxn = await waitForConfirmation(algodClient, txId);\r\n      console.log('submit handler, confirmedTrxn: ', confirmedTrxn);\r\n      const updatedAccountInfo = await handleUpdateAccountInfo(user.current.account.address);\r\n      console.log('the updated account info from trx submission', updatedAccountInfo);\r\n      return null;\r\n\r\n    } catch (e) {\r\n      console.error(e);\r\n    } finally {\r\n      handleAssetRefresh(asset?.index, false)\r\n    }\r\n  }\r\n  const userHasOptedInToAsset = (assetId, userAssets) => {\r\n    let result = false;\r\n    if (Array.isArray(userAssets) && userAssets?.length > 0) {\r\n      userAssets?.forEach((uAsset) => {\r\n        if (uAsset?.amount >= 0 && uAsset?.['asset-id'] === assetId) {\r\n          result = true;\r\n        }\r\n      });\r\n    }\r\n    return result;\r\n  }\r\n  const handleObtainAssetByMnemonic = async (asset) => {\r\n    handleAssetRefresh(asset?.index, true);\r\n    try {\r\n      const params = await getTransactionParams();\r\n      // console.log('oh boy sending transfer transaction by mnemonic| the params: ', params);\r\n  \r\n      const sender = asset?.params?.creator;\r\n      const recipient = user?.current?.account?.address;\r\n  \r\n      const revocationTarget = undefined;\r\n      const closeRemainderTo = undefined;\r\n  \r\n      const assetId = asset?.index;\r\n  \r\n      const amount = +obtainAssetAmount;\r\n      const note = algosdk.encodeObj(obtainAssetNote);\r\n      // console.log('an obj of the trx: ', {\r\n      //   sender,\r\n      //   recipient,\r\n      //   closeRemainderTo,\r\n      //   revocationTarget,\r\n      //   amount,\r\n      //   note,\r\n      //   assetId,\r\n      //   params,\r\n      // });\r\n      const transferTransaction = algosdk.makeAssetTransferTxnWithSuggestedParams(\r\n        sender,\r\n        recipient,\r\n        closeRemainderTo,\r\n        revocationTarget,\r\n        amount,\r\n        note,\r\n        assetId,\r\n        params,\r\n      );\r\n      // Prompt user for mnemonic so we can sign with sk\r\n      const account = algosdk.mnemonicToSecretKey(process.env.REACT_APP_BASE_WALLET_MNEMONIC);\r\n      // console.log('account from mnemonic: ', account);\r\n      const rawSignedTxn = transferTransaction.signTxn(account?.sk);\r\n      const txId = transferTransaction.txID().toString();\r\n      // console.log('Singed transaction with txId: %s', txId);\r\n      // submit transaction\r\n      const trxSubmission = await algodClient.sendRawTransaction(rawSignedTxn).do();\r\n      // console.log('the transaction submission: ', trxSubmission);\r\n      \r\n      // Wait for confirmation\r\n      const confirmedTrxn = await waitForConfirmation(algodClient, txId);\r\n      // console.log('submit handler, confirmedTrxn: ', confirmedTrxn);\r\n      const updatedAccountInfo = await handleUpdateAccountInfo(user.current.account.address);\r\n      // console.log('the updated account info from trx submission', updatedAccountInfo);\r\n      return trxSubmission;\r\n\r\n    } catch (e) {\r\n      console.error(e);\r\n    } finally {\r\n      handleAssetRefresh(asset?.index, false);\r\n    }\r\n  }\r\n  const handleOptInAlgoSignerInput = async () => {\r\n    // this just connects to AlgoSigner, user will need to choose account to use\r\n    if (AlgoSigner) {\r\n      await AlgoSigner.connect();\r\n      const accounts = await AlgoSigner.accounts({\r\n        ledger: 'TestNet',\r\n      });\r\n      setAlgoSignerWallets(accounts);\r\n      return null;\r\n    } else {\r\n      setAlgoSignerWallets([{\r\n        address: 'AlgoSigner not detected',\r\n      }]);\r\n    }\r\n  }  \r\n\r\n  const handleOptIn = async (signMethod, asset) => {\r\n    switch(signMethod) {\r\n      case 'AlgoSigner':\r\n        if (algoSignerWalletSelected === null) {\r\n          console.error('Please select valid wallet');\r\n          return null;\r\n        }\r\n        handleAssetRefresh(asset?.index, true);\r\n        try {\r\n          const params = await getTransactionParams();\r\n          const optInTrx = createOptInTrx(\r\n            algosdk,\r\n            algoSignerWalletSelected,\r\n            params,\r\n            asset,\r\n          );\r\n          // Encode to base64 text\r\n          const base64Tx = AlgoSigner.encoding.msgpackToBase64(optInTrx.toByte());\r\n          // sign with AlgoSigner\r\n          const signedTx = await AlgoSigner.signTxn([{ txn: base64Tx }]);\r\n          // Send signed transaction\r\n          // TODO: implement Ledger Handling\r\n          const submittedSignedTrx = await AlgoSigner.send({\r\n            ledger: 'TestNet',\r\n            tx: signedTx[0]?.blob,\r\n          });\r\n          // Wait for confirmation\r\n          await waitForConfirmation(algodClient, submittedSignedTrx.txId);\r\n          // Update Account Info\r\n          await handleUpdateAccountInfo(user.current.account.address);\r\n\r\n          return null;\r\n        } catch (e) {\r\n          console.error(e);\r\n        } finally {\r\n          handleAssetRefresh(asset?.index, false);\r\n          return null;\r\n        }\r\n      case 'MyAlgoConnect':\r\n        handleAssetRefresh(asset?.index, true);\r\n        try {\r\n          // init myAlgoConnect\r\n          const myAlgoConnect = new MyAlgoConnect({ disableLedgerNano: false });\r\n          // Get Desired Account\r\n          await myAlgoConnect.connect({\r\n            shouldSelectOneAccount: false,\r\n            openManager: true,\r\n          });\r\n          // Get Params\r\n          const params = await getTransactionParams();\r\n          // Create OptIn Transaction\r\n          const optInTrx = await createOptInTrx(\r\n            algosdk,\r\n            user?.account?.address,\r\n            params,\r\n            asset,\r\n          );\r\n          // Sign & Submit Transaction\r\n          const signedTrx = await myAlgoConnect.signTransaction(optInTrx.toByte());\r\n          // Send Signed Transaction\r\n          await algodClient.sendRawTransaction(signedTrx.blob).do();\r\n          // Wait for confirmation\r\n          await waitForConfirmation(algodClient, signedTrx.txID);\r\n          // Update Account Info\r\n          await handleUpdateAccountInfo(user?.account?.address);\r\n\r\n          return null;\r\n        } catch (e) {\r\n          console.error(e);\r\n        } finally {\r\n          handleAssetRefresh(asset?.index, false);\r\n          return null;\r\n        }\r\n      default:\r\n        return null;\r\n    }\r\n  }\r\n  const handlePaginationChange = (e, v) => {\r\n    setPage(v);\r\n  }\r\n\r\n  // update active asset id based on which page user is on\r\n  useEffect(() => {\r\n    // resest active asset to null so component refreshes visually\r\n    setActiveAsset(null);\r\n    setActiveAssetId(assetIdList[page - 1]);\r\n  }, [activeAssetId, assetIdList, page, setActiveAssetId]);\r\n  // update active asset state based on active asset id\r\n  useEffect(() => {\r\n    const getAssetInfo = async (id) => {\r\n      const assetInfo = await handleGetAssetInfo(id);\r\n      setActiveAsset(assetInfo?.asset);\r\n    };\r\n    if (String(activeAssetId)?.length > 0) {\r\n      getAssetInfo(activeAssetId);\r\n    }\r\n  }, [activeAssetId, handleGetAssetInfo]);\r\n  // get user asset amount\r\n  useEffect(() => {\r\n    const getUserAssetAmount = (asset) => {\r\n      const result = {\r\n        userTotal: 0,\r\n        assetTotal: asset?.params?.total,\r\n      };\r\n      if (Array.isArray(user?.account?.assets)\r\n        && user?.account?.assets?.length > 0) {\r\n          let uAIndex = 0;\r\n          while (uAIndex < user?.account?.assets?.length) {\r\n            // match by asset id & ensure user has at least opted in to asset\r\n            if (user?.account?.assets[uAIndex]?.['asset-id'] === asset?.index\r\n              && user?.account?.assets[uAIndex]?.amount >= 0) {\r\n                result.userTotal = +user?.account?.assets[uAIndex]?.amount;\r\n                break;\r\n              }\r\n            uAIndex += 1;\r\n          }\r\n      }\r\n      return result;\r\n    }\r\n    if (activeAsset !== null) {\r\n      setUserAssetTotals(getUserAssetAmount(activeAsset));\r\n    }\r\n  }, [activeAsset, user?.account?.assets]);\r\n  // check if user has opted into asset\r\n  useEffect(() => {\r\n    if (activeAsset !== null) {\r\n      setUserOptedIn(userHasOptedInToAsset(activeAsset?.index, user?.account?.assets));\r\n    }\r\n  }, [activeAsset, user]);\r\n  // console.log('the user', user);\r\n  // console.log('the active asset', activeAsset);\r\n\r\n  // https://dappradar.com/blog/algorand-dapp-development-2-standard-asset-management\r\n  return (\r\n    <div className={classes.root}>\r\n      <>\r\n        <Card\r\n          component={Paper}\r\n          className={classes.card}\r\n        >\r\n          {activeAsset !== null\r\n            ? (\r\n              <>\r\n                <CardContent>\r\n                  <Typography>\r\n                    {`${activeAsset?.params?.name} (${activeAssetId})`}\r\n                  </Typography>\r\n                  <Typography>\r\n                    {`${userAssetTotals?.userTotal} / ${userAssetTotals?.assetTotal}`}\r\n                  </Typography>\r\n                </CardContent>\r\n                <CardActions className={classes.cardActions}>\r\n                  <>\r\n                    <IconButton\r\n                      onClick={() => handleToggleAssetCollapse()}\r\n                      title='Additional Information'\r\n                    >\r\n                      {assetCollapse\r\n                        ? <ExpandLessIcon />\r\n                        : <ExpandMoreIcon />}\r\n                    </IconButton>\r\n                  </>\r\n                  {userOptedIn\r\n                    ? (\r\n                      <>\r\n                        <TextField\r\n                          type=\"number\"\r\n                          onChange={(e) => handleObtainAssetAmountChange(e, activeAsset?.params?.total)}\r\n                        />\r\n                        <TextField\r\n                          placeholder='Note (optional)'\r\n                          onChange={handleObtainAssetNoteChange}\r\n                        />\r\n                        <Button\r\n                          onClick={() => handleToggleObtainAssetCollapse()}\r\n                        >\r\n                          Obtain Asset\r\n                        </Button>\r\n                      </>\r\n                    ) : (\r\n                      <Button\r\n                        onClick={() => handleToggleOptInCollapse(activeAsset?.index)}\r\n                      >\r\n                        Opt-In\r\n                      </Button>\r\n                    )}\r\n                </CardActions>\r\n              </>\r\n            ) : <LinearProgress />}\r\n            {/* Various Collapses (Additional Info, OptIn & Transfer Trx Signing Methods, etc) */}\r\n            <Collapse\r\n              in={assetCollapse}\r\n              timeout=\"auto\"\r\n              unmountOnExit\r\n              className={classes.card}\r\n            >\r\n              <CardContent>\r\n                <Typography>Additional Info For Asset: {activeAsset?.index}</Typography>\r\n              </CardContent>\r\n            </Collapse>\r\n            <Collapse\r\n              in={assetOptInCollaspe}\r\n              timeout=\"auto\"\r\n              unmountOnExit\r\n              className={classes.card}\r\n            >\r\n              <SigningMethods\r\n                handleAssetByAlgoSigner={() => handleOptInAlgoSignerInput()}\r\n                handleAssetByMyAlgoConnect={() => handleOptIn('MyAlogConnect', activeAsset)}\r\n              />\r\n            </Collapse>\r\n            <Collapse\r\n              in={assetObtainCollaspe}\r\n              timeout=\"auto\"\r\n              unmountOnExit\r\n              className={classes.card}\r\n            >\r\n              <SigningMethods\r\n                // TODO: MyAlgoConnect transfer transaction\r\n              />\r\n            </Collapse>\r\n            <Collapse\r\n              in={algoSignerWallets !== null\r\n                && algoSignerWallets?.length > 0\r\n                && assetOptInCollaspe\r\n              }\r\n              timeout=\"auto\"\r\n              unmountOnExit\r\n              className={classes.card}\r\n            >\r\n              {algoSignerWallets !== null && algoSignerWallets?.length > 0\r\n                ? (\r\n                  <CardContent>\r\n                    {algoSignerWallets?.map((asW, i) => (\r\n                      <Button\r\n                        key={i}\r\n                        onClick={() => setAlgoSignerWalletSelected(asW?.address)}\r\n                        color={algoSignerWalletSelected !== null\r\n                          && asW?.address === algoSignerWalletSelected\r\n                          ? 'primary' : 'inherit'}\r\n                        variant=\"contained\"\r\n                        className={algoSignerWalletSelected !== null\r\n                          && asW?.address === algoSignerWalletSelected\r\n                          ? null : classes.notSelectedWallet}\r\n                      >\r\n                        {asW?.address}\r\n                      </Button>\r\n                    ))}\r\n                    {algoSignerWalletSelected !== null\r\n                      ? (\r\n                        <Button onClick={() => handleOptIn('AlgoSigner', activeAsset)}>\r\n                          Confirm\r\n                        </Button>\r\n                      ) : null}\r\n                  </CardContent>\r\n                ) : null}\r\n            </Collapse>\r\n        </Card>\r\n      </>\r\n      <Pagination\r\n        count={assetIdList?.length}\r\n        page={page}\r\n        onChange={handlePaginationChange}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AssetListComponent;\r\n","import React, { useRef, useEffect, useState } from 'react';\r\n// MUI\r\nimport { makeStyles } from '@material-ui/core';\r\nimport Typography from '@material-ui/core/Typography';\r\n// import Select from '@material-ui/core/Select';\r\n// import MenuItem from '@material-ui/core/MenuItem';\r\n// import TextField from '@material-ui/core/TextField';\r\n// import Button from '@material-ui/core/Button';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\n// Custom\r\nimport AssetListComponent from '../components/AssetListComponent';\r\n\r\nconst delay = (ms) => new Promise(res => setTimeout(res, ms));\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    paddingTop: '8px',\r\n    justifyContent: 'center',\r\n    '& .MuiInputBase-root': {\r\n      margin: 'auto',\r\n      maxWidth: theme.spacing(35),\r\n    },\r\n  },\r\n}));\r\n\r\nconst LandingPage = (props) => {\r\n  const classes = useStyles();\r\n  const {\r\n    user,\r\n    handleGetAccountInfo,\r\n    handleGetAssetInfo,\r\n    handleGetTransactionParams,\r\n    algosdk,\r\n    algodClient,\r\n    handleSetAccount,\r\n    ledger,\r\n    setLedger,\r\n  } = props;\r\n  const assets = useRef();\r\n  console.log('the user?', user);\r\n  console.log('assets?', assets?.current);\r\n  const [refresh, setRefresh] = useState(false);\r\n  const [walletInput, setWalletInput] = useState('');\r\n  const [assetIdList, setAssetIdList] = useState(user?.account?.assets?.map((a) => a['asset-id']));\r\n  const [page, setPage] = useState(1);\r\n  const [activeAssetId, setActiveAssetId] = useState('');\r\n  /**\r\n   * Handle Updating Account Info\r\n   * @param {Object} addr wallet address information object returned from algo adk indexer\r\n   * @fires handleSetAccount\r\n   * @returns {Object} the updated account info\r\n   */\r\n  const handleUpdatingAccountInfo = async (addr) => {\r\n    const updatedAccountInfo = await handleGetAccountInfo(addr);\r\n    handleSetAccount(updatedAccountInfo);\r\n    return updatedAccountInfo;\r\n  };\r\n  \r\n  // get assets from main wallet address\r\n  // useEffect(() => {\r\n  //   /**\r\n  //    * Get Wallet & Asset Info\r\n  //    * @param {string} walletAddress the wallet you want info for\r\n  //    * @returns {Object} account obj & current round\r\n  //    * @fires setAssets with any assets associated with the wallet address (maybe\r\n  //    *  this changes to only display assets that match what main wallet has) (\r\n  //    *  only want to show assets in wallet that are also in main wallet i guess)\r\n  //    */\r\n  //   const getWalletAssetsInfo = async (walletAddress) => {\r\n  //     setRefresh(true);\r\n  //     const walletInfo = await handleGetAccountInfo(walletAddress);\r\n  //     if (typeof walletInfo === 'object' && Object.keys(walletInfo).includes('account')) {\r\n  //       const assetInfoRes = [];\r\n  //       if (Array.isArray(walletInfo.account?.assets)) {\r\n  //         walletInfo.account.assets.forEach((asset) => {\r\n  //           assetInfoRes.push(handleGetAssetInfo(asset['asset-id']));\r\n  //         });\r\n  //       }\r\n  //       const assetInfoResResolved = await Promise.all(assetInfoRes);\r\n  //       console.log('asset info res after promise all', assetInfoResResolved);\r\n        \r\n  //       assets.current = [...assetInfoResResolved];        \r\n        \r\n  //     }\r\n  //     setRefresh(false);\r\n  //     return walletInfo;\r\n  //   } \r\n  //   if (assets.current === undefined) {\r\n  //     // get assets from main wallet\r\n  //     getWalletAssetsInfo(process.env.REACT_APP_BASE_WALLET_ADDRESS);\r\n  //   }\r\n  // }, [assets, handleGetAccountInfo, handleGetAssetInfo]);\r\n  console.log('the assets: ', assets);\r\n  console.log('the ledger', ledger);\r\n  return refresh ? <LinearProgress /> : (\r\n    <div className={classes.root}>\r\n      <Typography variant=\"subtitle1\" color=\"primary\">\r\n        Real Estate For The Digital Age\r\n      </Typography>\r\n      {user === null || user === undefined\r\n        ? (\r\n          <>\r\n            {/* TODO: When / if redesign, if wallet & net based,\r\n              implement workflow to capture relevant info */}\r\n            {/* <Select\r\n              label=\"Ledger\"\r\n              title=\"Ledger\"\r\n              onChange={handleSelectLedgerChange}\r\n              value={ledger}\r\n            >\r\n              {['', 'MainNet', 'TestNet']?.map((lgr, i) => (\r\n                <MenuItem\r\n                  value={lgr}\r\n                  key={i}\r\n                >\r\n                  {lgr}\r\n                </MenuItem>\r\n              ))}\r\n            </Select>\r\n            <form onSubmit={handleConnectWalletSubmit}>\r\n              <TextField\r\n                label=\"Wallet Address\"\r\n                value={walletInput}\r\n                onChange={handleWalletInputChange}\r\n              />\r\n              <Button type=\"submit\">Connect Wallet</Button>\r\n            </form> */}\r\n          </>\r\n        ) : (\r\n          <div>\r\n            <AssetListComponent\r\n              assets={assets.current}\r\n              algodClient={algodClient}\r\n              user={user}\r\n              algosdk={algosdk}\r\n              handleUpdateAccountInfo={handleUpdatingAccountInfo}\r\n              handleGetAssetInfo={handleGetAssetInfo}\r\n              assetIdList={assetIdList}\r\n              page={page}\r\n              setPage={setPage}\r\n              activeAssetId={activeAssetId}\r\n              setActiveAssetId={setActiveAssetId}\r\n            />\r\n          </div>\r\n        )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LandingPage;\r\n","/**\r\n * Display Address\r\n * @param {object} address \r\n * @returns {string} formatted address string based on passed obj\r\n */\r\nconst displayAddress = (address) => {\r\n  if (!address) return '';\r\n  if (Object?.keys(address) < 1) return address;\r\n  let result = '';\r\n  Object.keys(address).map((addr, i) => (\r\n    result += `${\r\n      address[addr]?.length > 0\r\n        ? i > 0\r\n          ? `, ${address[addr]}`\r\n          : `${address[addr]}`\r\n        : ''\r\n    }`\r\n  ));\r\n  return result;\r\n}\r\n\r\nexport default displayAddress;\r\n","/**\r\n * Comma Format\r\n * @param {Number} n to format\r\n * @returns {String} number value with commas\r\n */\r\nexport const commaFormat = (n) => {\r\n  if (!n) return n;\r\n  return String(n)?.split('')?.reverse()?.map((char, i) => {\r\n    if (i % 3 === 0 && i !== 0) {\r\n      return `${char},`;\r\n    }\r\n    return char;\r\n  })?.reverse()?.join('');\r\n}\r\n/**\r\n * Capitalize\r\n * @param {string} s some camel case string probably\r\n * @returns {string} Capitalize Case String With Spaces\r\n */\r\nexport const capitalize = (s) => {\r\n  const upperCase = s.substring(0, 1).toUpperCase() + s.substring(1);\r\n  const reg = /([A-Z])/g;\r\n  return upperCase.replace(reg, ' $1');\r\n}\r\n\r\nexport const dollarFormat = (n) => `$${n}`;\r\n\r\nexport default dollarFormat;\r\n","import React, { useState } from 'react';\r\nimport { useHistory } from 'react-router';\r\n// MUI Core\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Card from '@material-ui/core/Card';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Accordion from '@material-ui/core/Accordion';\r\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\r\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\r\n// Lab\r\nimport Timeline from '@material-ui/lab/Timeline';\r\nimport TimelineItem from '@material-ui/lab/TimelineItem';\r\nimport TimelineSeparator from '@material-ui/lab/TimelineSeparator';\r\nimport TimelineConnector from '@material-ui/lab/TimelineConnector';\r\nimport TimelineContent from '@material-ui/lab/TimelineContent';\r\nimport TimelineOppositeContent from '@material-ui/lab/TimelineOppositeContent';\r\nimport TimelineDot from '@material-ui/lab/TimelineDot';\r\n// Icons\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\n// Utils\r\nimport displayAddress from '../utilities/displayAddress';\r\nimport { capitalize } from '../utilities/formatUtil';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    paddingLeft: theme.spacing(2),\r\n    paddingRight: theme.spacing(2),\r\n  },\r\n  header: {\r\n    display: 'flex',\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n    '& button.MuiIconButton-root': {\r\n      paddingLeft: theme.spacing(0),\r\n    },\r\n  },\r\n  top: {\r\n    display: 'flex',\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-around',\r\n  },\r\n  deets: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n  },\r\n  deetHeader: {\r\n    display: 'flex',\r\n    flexDirection: 'row',\r\n    alignItems: 'baseline',\r\n  },\r\n  subheader: {\r\n    width: '100%',\r\n    backgroundColor: theme.palette.primary.main,\r\n    padding: theme.spacing(1),\r\n    marginTop: theme.spacing(4),\r\n    borderRadius: theme.spacing(1),\r\n    boxShadow: '0px 2px 6px #FFF',\r\n  },\r\n  topMobile: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n  },\r\n}));\r\n\r\nconst ProductPage = () => {\r\n  const history = useHistory();\r\n  const classes = useStyles();\r\n  const [expandTL, setExpandTL] = useState('');\r\n  const propInfo = history?.location?.state?.activeProperty;\r\n  /**\r\n   * Mobile? maxWidth: 415px\r\n   * @type {boolean} - is the current viewpoint mobile?\r\n   */\r\n  const mobile = useMediaQuery('(max-width:415px)');\r\n  /**\r\n   * Handle Expanding Timeline Accordions\r\n   * @param {int} panel panel index\r\n   * @fires setExpandTL to new panel or close\r\n   */\r\n  const handleExpandTL = (panel) => (e, newE) => setExpandTL(newE ? panel : false);\r\n  // console.log('prop info', propInfo);\r\n  return (\r\n    <div className={classes.root}>\r\n      <div className={classes.header}>\r\n        <IconButton onClick={() => history.goBack()}>\r\n          <ArrowBackIcon />\r\n        </IconButton>\r\n        <Typography variant=\"h6\" component=\"h2\" style={{ margin: 'auto' }}>\r\n          {displayAddress(history?.location?.state?.activeProperty?.propertyInfo?.address)}\r\n        </Typography>\r\n      </div>\r\n      <div className={classes.body}>\r\n        <div className={\r\n          mobile ? classes.mobileTop : classes.top\r\n        }>\r\n          <div className={classes.imgs}>\r\n            {/* TODO: img file paths: meh good enough for now */}\r\n            {propInfo?.images ? (\r\n              <>\r\n                <img\r\n                  src={`${process.env.REACT_APP_URL_BASE}/${propInfo?.images?.[0]?.path}`}\r\n                  alt={`${displayAddress(\r\n                    propInfo?.propertyInfo.address\r\n                  )}-pics`}\r\n                />\r\n              </>\r\n            ) : null}\r\n          </div>\r\n          <div className={classes.deets}>\r\n            <Table size=\"small\">\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell>\r\n                    <b>Property Info</b>\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    <Chip\r\n                      color={\r\n                        propInfo?.propertyInfo.vacant === 'occupied'\r\n                          ? 'primary' : 'secondary'\r\n                      }\r\n                      label={\r\n                        propInfo?.propertyInfo.vacant === 'occupied'\r\n                          ? 'Occupied' : 'Vacant'}\r\n                    />\r\n                  </TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                <TableRow>\r\n                  <TableCell>\r\n                    <b>Occupancy</b>\r\n                  </TableCell>\r\n                  <TableCell>{propInfo?.propertyInfo.vacant}</TableCell>\r\n                </TableRow>\r\n                <TableRow>\r\n                  <TableCell>\r\n                    <b>Bath</b>\r\n                  </TableCell>\r\n                  <TableCell>{propInfo?.propertyInfo.bath}</TableCell>\r\n                </TableRow>\r\n                <TableRow>\r\n                  <TableCell>\r\n                    <b>Bedroom(s)</b>\r\n                  </TableCell>\r\n                  <TableCell>{propInfo?.propertyInfo.bedrooms}</TableCell>\r\n                </TableRow>\r\n                <TableRow>\r\n                  <TableCell>\r\n                    <b>Type</b>\r\n                  </TableCell>\r\n                  <TableCell>{propInfo?.propertyInfo.propertyType}</TableCell>\r\n                </TableRow>\r\n                <TableRow>\r\n                  <TableCell>\r\n                    <b>Sqft</b>\r\n                  </TableCell>\r\n                  <TableCell>{propInfo?.propertyInfo.sqft}</TableCell>\r\n                </TableRow>\r\n                <TableRow>\r\n                  <TableCell>\r\n                    <b>Year Built</b>\r\n                  </TableCell>\r\n                  <TableCell>{propInfo?.propertyInfo.yearBuilt}</TableCell>\r\n                </TableRow>\r\n              </TableBody>\r\n            </Table>\r\n          </div>\r\n        </div>\r\n        <div className={classes.numbers}>\r\n          <h4 className={classes.subheader}>Quick Numbers</h4>\r\n          <Table size=\"small\">\r\n            <TableBody>\r\n              <TableRow>\r\n                <TableCell noWrap>\r\n                  <b>Token Info</b>\r\n                </TableCell>\r\n                <TableCell>\r\n                  <Chip\r\n                    label={propInfo?.status}\r\n                    color={propInfo?.status !== 'sold out'\r\n                      ? 'primary' : 'secondary'}\r\n                  />\r\n                </TableCell>\r\n                <TableCell colSpan={2}>\r\n                  <b>Investment Info</b>\r\n                </TableCell>\r\n              </TableRow>\r\n              <TableRow>\r\n                <TableCell>\r\n                  # Sold\r\n                </TableCell>\r\n                <TableCell>\r\n                  {propInfo.tokenInfo.totalSold}\r\n                </TableCell>\r\n                <TableCell>\r\n                  Total Investment\r\n                </TableCell>\r\n                <TableCell>\r\n                  {propInfo.investmentInfo.totalInvestment}\r\n                </TableCell>\r\n              </TableRow>\r\n              <TableRow>\r\n                <TableCell>\r\n                  # Available\r\n                </TableCell>\r\n                <TableCell>\r\n                  {propInfo.tokenInfo.totalAvailable\r\n                    - propInfo.tokenInfo.totalSold}\r\n                </TableCell>\r\n                <TableCell>\r\n                  $ / Token\r\n                </TableCell>\r\n                <TableCell>\r\n                  {`$${+(propInfo.investmentInfo.totalInvestment\r\n                    / propInfo.investmentInfo.totalTokens).toFixed(2)}`}\r\n                </TableCell>\r\n              </TableRow>\r\n            </TableBody>\r\n          </Table>\r\n        </div>\r\n        <div>\r\n          <h4 className={classes.subheader}>Project Timeline</h4>\r\n          <Timeline>\r\n            {Array.isArray(propInfo?.projectTimeline) ? (\r\n              propInfo.projectTimeline?.sort((a, b) => \r\n                new Date(a.date) < new Date(b.date)\r\n              )?.map((tl, i) => (\r\n                <TimelineItem>\r\n                  <TimelineOppositeContent style={{ marginTop: '12px' }}>\r\n                    {tl?.date}\r\n                  </TimelineOppositeContent>\r\n                  <TimelineSeparator style={{ marginTop: '12px' }}>\r\n                    <TimelineDot\r\n                      color={i === 0\r\n                        ? 'secondary' : 'primary'}\r\n                    />\r\n                    {i !== propInfo.projectTimeline.length - 1\r\n                      ? <TimelineConnector /> : null}\r\n                  </TimelineSeparator>\r\n                  <TimelineContent>\r\n                    <Accordion\r\n                      square\r\n                      expanded={expandTL === i}\r\n                      onChange={handleExpandTL(i)}\r\n                    >\r\n                      <AccordionSummary>\r\n                        <b>{tl?.title}</b>\r\n                      </AccordionSummary>\r\n                      <AccordionDetails>\r\n                        {tl?.description}\r\n                      </AccordionDetails>\r\n                    </Accordion>\r\n                  </TimelineContent>\r\n                </TimelineItem>\r\n              ))\r\n            ) : null}\r\n          </Timeline>\r\n        </div>\r\n        <div>\r\n          <h4 className={classes.subheader}>More Numbers</h4>\r\n          <Table size=\"small\">\r\n            {propInfo?.financialInfo ? (\r\n              Object.keys(propInfo.financialInfo).map((f, i) => (\r\n                <TableRow>\r\n                  {i % 2 === 0 ? (\r\n                    <>\r\n                      <TableCell>\r\n                        {capitalize(Object.keys(propInfo.financialInfo)[i + 1])}\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        {propInfo.financialInfo[Object.keys(propInfo.financialInfo)[i + 1]]}\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        {capitalize(f)}\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        {propInfo.financialInfo[f]}\r\n                      </TableCell>\r\n                    </>\r\n                  ) : null}\r\n                </TableRow>\r\n              ))\r\n            ) : null}\r\n          </Table>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ProductPage;\r\n","import React, { useState, useEffect } from 'react';\r\n// MUI\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport Divider from '@material-ui/core/Divider';\r\n// Util\r\nimport { commaFormat } from '../utilities/formatUtil';\r\n\r\nconst ProfilePage = (props) => {\r\n  const {\r\n    account,\r\n    handleSetAccount,\r\n    algosdk,\r\n    handleGetAccountInfo,\r\n    handleGetAssetInfo,\r\n    handleGetTransactionParams,\r\n  } = props;\r\n  // https://dappradar.com/blog/algorand-dapp-development-2-standard-asset-management\r\n  const [refresh, setRefresh] = useState(false);\r\n  const [assets, setAssets] = useState(null);\r\n  const [walletInput, setWalletInput] = useState('');\r\n  /**\r\n   * Get Wallet & Asset Info\r\n   * @param {string} walletAddress the wallet you want info for\r\n   * @returns {Object} account obj & current round\r\n   * @fires setAssets with any assets associated with the wallet address (maybe\r\n   *  this changes to only display assets that match what main wallet has) (\r\n   *  only want to show assets in wallet that are also in main wallet i guess)\r\n   */\r\n  const getWalletAssetsInfo = async (walletAddress) => {\r\n    const walletInfo = await handleGetAccountInfo(walletAddress);\r\n    if (typeof walletInfo === 'object' && Object.keys(walletInfo).includes('account')) {\r\n      const assetInfoRes = [];\r\n      if (Array.isArray(walletInfo.account?.assets)) {\r\n        walletInfo.account.assets.forEach((asset) => {\r\n          assetInfoRes.push(handleGetAssetInfo(asset['asset-id']));\r\n        });\r\n      }\r\n      console.log('asset info res', assetInfoRes);\r\n      const assetInfoResResolved = await Promise.all(assetInfoRes);\r\n      console.log('asset info res after promise all', assetInfoResResolved);\r\n      if (Array.isArray(assetInfoResResolved) && assetInfoResResolved?.length > 0) {\r\n        setAssets(assetInfoResResolved);\r\n      }\r\n    }\r\n    setRefresh(true);\r\n    return walletInfo;\r\n  }\r\n\r\n  // const getTransactionParams = async () => {\r\n  //   const tParams = await handleGetTransactionParams();\r\n  //   console.log('some transaction params', tParams);\r\n  //   return tParams;\r\n  // }\r\n\r\n  const handleSubmit = async (e) => {\r\n    e?.preventDefault();\r\n    const walletInfo = await getWalletAssetsInfo(walletInput);\r\n    console.log('handle submit wallet info: ', walletInfo);\r\n    handleSetAccount(walletInfo);\r\n  }\r\n\r\n  const handleSignOut = () => {\r\n    setRefresh(true);\r\n    setAssets(null);\r\n    handleSetAccount(undefined);\r\n  };\r\n\r\n  console.log('account', account);\r\n  console.log('the assets', assets);\r\n\r\n  useEffect(() => {\r\n    if (refresh) {\r\n      setRefresh(false);\r\n    }\r\n  }, [refresh]);\r\n\r\n  useEffect(() => {\r\n    if (assets === null && account?.account !== undefined) {\r\n      getWalletAssetsInfo(account?.account?.address);\r\n    }\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [assets]);\r\n\r\n  return (\r\n    <div>\r\n      <>\r\n        {refresh\r\n          ? <LinearProgress />\r\n          : account !== undefined\r\n            ? Object?.keys(account)?.includes('account')\r\n              ? (\r\n                <>\r\n                  <Typography>\r\n                    My Account: {account?.account?.address}\r\n                  </Typography>\r\n                  <Typography>\r\n                    {commaFormat(account.account?.amount)} microAlgos\r\n                  </Typography>\r\n                  <Button onClick={handleSignOut}>Sign Out</Button>\r\n                </>\r\n              )\r\n              : Object.keys(account)?.includes('message')\r\n                ? (\r\n                  <>\r\n                    <Typography>\r\n                      {account?.message}\r\n                    </Typography>\r\n                    <Button onClick={handleSignOut}>Sign Out</Button>\r\n                  </>\r\n                )\r\n                : null\r\n            : (\r\n              <form onSubmit={handleSubmit}>\r\n                <Typography>Login With Wallet Address</Typography>\r\n                <TextField\r\n                  value={walletInput}\r\n                  onChange={(e) => setWalletInput(e.target.value)}\r\n                />\r\n                <Button type=\"submit\">Submit</Button>\r\n              </form>\r\n            )}\r\n        {/* <Button\r\n          onClick={() => getWalletAssetsInfo(process.env.REACT_APP_BASE_WALLET_ADDRESS)}\r\n          variant=\"contained\"\r\n        >\r\n          Get Assets\r\n        </Button>\r\n        <Button\r\n          onClick={() => getTransactionParams()}\r\n        >\r\n          Transaction Params\r\n        </Button> */}\r\n        {Array.isArray(assets) && assets?.length > 0\r\n          ? (\r\n            <div>\r\n              <Typography>My Assets</Typography>\r\n              <Divider />\r\n              {assets?.map(({ asset }, i) => (\r\n                <div key={i}>\r\n                  <Typography>{asset?.params?.name}</Typography>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          ) : null}\r\n      </>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ProfilePage;\r\n","const AccountPage = () => {\r\n  return (\r\n    <div>Account Page</div>\r\n  );\r\n};\r\n\r\nexport default AccountPage;\r\n","\nimport React, {\n  useState,\n  useRef,\n  useEffect,\n} from 'react';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from 'react-router-dom';\n\nimport algosdk from 'algosdk';\n// import * as reach from '@reach-sh/stdlib/ALGO';\n\n// MUI\nimport LinearProgress from '@material-ui/core/LinearProgress';\n\nimport './App.css';\nimport MainTheme from './components/Theme';\nimport Nav from './components/NavComponent';\nimport Footer from './components/FooterComponent';\nimport LandingPage from './pages/LandingPage';\nimport ProductPage from './pages/ProductPage';\nimport ProfilePage from './pages/ProfilePage';\nimport AccountPage from './pages/AccountPage';\n// Custom\nimport {\n  getAlgoServer,\n  getIndexerServer,\n  getPureStakeAPIToken,\n} from '../src/utilities/algo';\n/**\n * Well this seemed to have gotten updated a bit.\n *  with custom rendering propd pages for user mngmt\n * @returns {Component}\n */\nconst App = () => {\n  const [account, setAccount] = useState(null);\n  const [ledger, setLedger] = useState('');\n  const [algodServer, setAlgodServer] = useState('');\n  const [indexerServer, setIndexerServer] = useState('');\n  const [token, setToken] = useState({\n    'X-API-KEY': '',\n  });\n  const port = '';\n\n  const [algodClient, setAlgodClient] = useState(null);\n  const [indexerClient, setIndexerClient] = useState(null);\n  // Configure Algod + Indexer Servers, & API token values\n  useEffect(() => {\n    if (ledger?.length > 0) {\n      if (algodServer?.length === 0) {\n        setAlgodServer(getAlgoServer(ledger, process.env));\n      }\n      if (indexerServer?.length === 0) {\n        setIndexerServer(getIndexerServer(ledger, process.env));\n      }\n      if (token['X-API-KEY']?.length === 0) {\n        setToken({\n          'X-API-KEY': getPureStakeAPIToken(ledger, process.env),\n        });\n      }\n    }\n  }, [ledger, algodServer, indexerServer, token]);\n  // Configure & Instantiate Aglod + Indexer Clients\n  useEffect(() => {\n    if ((algodClient === null\n      || algodClient === undefined)\n      && String(algodServer)?.length > 0\n    ) {\n      setAlgodClient(new algosdk.Algodv2(token, algodServer, port));\n    }\n    if ((indexerClient === null\n      || indexerClient === undefined)\n      && String(indexerServer)?.length > 0\n    ) {\n      setIndexerClient(new algosdk.Indexer(token, indexerServer, port));\n    }\n  }, [algodClient, algodServer, indexerClient, indexerServer, token]);\n\n  // Begin SDK Setup\n  // const algodServer = `${getAlgoServer(ledger)}`\n  // const indexerServer = `${getIndexerServer(ledger)}`\n  // const token = { 'X-API-Key': `${getPureStakeAPIToken(ledger)}` }\n  // TODO: incorporate creating asa & indexing assets\n  // ie https://purestake.github.io/algosigner-dapp-example/\n  // Only initialize if above is defined in env\n  // if (algodServer?.length > 0 && indexerServer?.length > 0) {\n  //   algodClient = new algosdk.Algodv2(token, algodServer, port);\n  //   indexerClient = new algosdk.Indexer(token, indexerServer, port);\n  // }\n  const handleSetAccount = (info) => setAccount(info);\n  /**\n   * Get Asset Information by ID\n   * @param {string | number} id assetId\n   * @returns {Object} assetInformation\n   */\n  const getAssetInformationByID = async (id) => {\n    const assetInfo = await indexerClient.lookupAssetByID(id).do();\n    return assetInfo;  \n  };\n  /**\n   * Get Account Information By Wallet Address\n   * @param {string} id wallet address\n   * @returns {Object} accountInformation\n   */\n  const getAccountInformationByID = async (id) => {\n    const accountInfo = await indexerClient.lookupAccountByID(id).do();\n    return accountInfo;\n  };\n  /**\n   * Get Transaction Parameters\n   * @async\n   * @returns {Promise} algoClient.getTransactionParams().do()\n   */\n  const getTransactionParams = async () => {\n    try {\n      return await algodClient.getTransactionParams().do();\n    } catch (e) {\n      console.error(e);\n    }\n  };\n  const handleSelectLedgerChange = (e) => {\n    setLedger(e.target.value);\n  };\n  \n  return (\n    <MainTheme>\n      <Router>\n        <Nav\n          user={account}\n          ledger={ledger}\n          handleSelectLedgerChange={handleSelectLedgerChange}\n          handleGetAccountInfo={getAccountInformationByID}\n          handleSetAccount={handleSetAccount}\n          algodClient={algodClient}\n          indexerClient={indexerClient}\n        />\n        {account !== null\n          ? (\n            <>\n              <div className=\"App container-fluid\">\n                <Switch>\n                  <Route\n                    path=\"/profile\"\n                    exact\n                    render={(props) => (\n                      <ProfilePage\n                        {...props}\n                        account={account}\n                        handleSetAccount={handleSetAccount}\n                        handleGetAccountInfo={getAccountInformationByID}\n                        handleGetAssetInfo={getAssetInformationByID}\n                        handleGetTransactionParams={getTransactionParams}\n                        algosdk={algosdk}\n                      />\n                    )}\n                  />\n                  <Route\n                    path=\"/account\"\n                    exact\n                    render={(props) => (\n                      <AccountPage\n                        {...props}\n                        user={account}\n                      />\n                    )}\n                  />\n                  <Route\n                    path=\"/property/:id\"\n                    exact\n                    render={(props) => (\n                      <ProductPage\n                        {...props}\n                        user={account}\n                      />\n                    )}\n                  />\n                  <Route\n                    path=\"/reach_for_algo\"\n                    exact\n                    render={(props) => (\n                      <LandingPage\n                        {...props}\n                        user={account}\n                        handleGetAccountInfo={getAccountInformationByID}\n                        handleGetAssetInfo={getAssetInformationByID}\n                        handleGetTransactionParams={getTransactionParams}\n                        algosdk={algosdk}\n                        algodClient={algodClient}\n                        handleSetAccount={handleSetAccount}\n                        ledger={ledger}\n                        setLedger={setLedger}\n                      />\n                    )}\n                  />\n                </Switch>      \n              </div>\n              <Footer />\n            </>\n          ) : null}\n      </Router>\n    </MainTheme>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}