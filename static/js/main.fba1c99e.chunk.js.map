{"version":3,"sources":["utilities/algo.js","utilities/formatUtil.js","components/AssetListComponent.jsx","pages/LandingPage.jsx","pages/ProfilePage.jsx","components/Theme.jsx","components/NavComponent.jsx","components/FooterComponent.jsx","App.js","reportWebVitals.js","index.js"],"names":["waitForConfirmation","algodClient","trxId","a","status","do","lastRound","pendingTransactionInformation","pendingInfo","statusAfterBlock","createOptInTrx","algosdk","sender","params","asset","recipient","send","undefined","makeAssetTransferTxnWithSuggestedParams","index","console","error","createTransferTrx","obtainAmount","obtainNote","creator","assetId","amount","note","encodeObj","getPureStakeAPIToken","ledger","env","REACT_APP_MAINNET_PURESTAKE_API_KEY","REACT_APP_TESTNET_PURESTAKE_API_KEY","REACT_APP_BETANET_PURESTAKE_API_KEY","CryptoJS","require","commaFormat","n","String","split","reverse","map","char","i","join","useStyles","makeStyles","theme","root","display","flexDirection","alignItems","card","maxWidth","spacing","minWidth","cardActions","justifyContent","padding","notSelectedWallet","opacity","pagination","color","palette","primary","main","obtainAssetInfo","margin","assetAmountTable","border","marginBottom","AssetListComponent","props","user","handleUpdateAccountInfo","assetIdList","page","setPage","activeAssetId","setActiveAssetId","handleGetAssetInfo","indexerClient","classes","SigningMethods","handleAssetByAlgoSigner","handleAssetByMyAlgoConnect","CardContent","Typography","Button","disabled","AlgoSigner","onClick","variant","useState","assetCollapse","setAssetCollapse","assetOptInCollaspe","setAssetOptInCollapse","obtainAssetAmount","setObtainAssetAmount","obtainAssetNote","setObtainAssetNote","assetObtainCollape","setAssetObtainCollapse","assetRefresh","setAssetRefresh","algoSignerWallets","setAlgoSignerWallets","algoSignerWalletSelected","setAlgoSignerWalletSelected","activeAsset","setActiveAsset","userTotal","assetAvailable","assetTotal","userAssetTotals","setUserAssetTotals","userOptedIn","setUserOptedIn","handleAssetRefresh","value","getTransactionParams","handleGetAlgoSignerWallets","connect","accounts","address","handleOptIn","signMethod","optInTrx","base64Tx","encoding","msgpackToBase64","toByte","signTxn","txn","signedTx","tx","blob","submittedSignedTrx","txId","current","account","myAlgoConnect","MyAlgoConnect","disableLedgerNano","shouldSelectOneAccount","openManager","signTransaction","signedTrx","sendRawTransaction","txID","handleTransferTransaction","transferTrx","mnemonicToSecretKey","text","process","key","AES","decrypt","toString","enc","Utf8","rawSignedTxn","sk","useEffect","getAssetInfo","id","assetInfo","length","getUserAssetAmount","result","total","lookupAssetBalances","indexerResult","walletIndex","balances","getAmounts","userAssets","Array","isArray","forEach","uAsset","userHasOptedInToAsset","assets","className","Card","component","Paper","LinearProgress","name","CardActions","IconButton","title","Collapse","in","timeout","unmountOnExit","TextField","type","onChange","e","target","handleObtainAssetAmountChange","placeholder","asW","Pagination","count","v","paddingTop","LandingPage","handleGetAccountInfo","handleSetAccount","useRef","handleUpdatingAccountInfo","addr","updatedAccountInfo","ProfilePage","history","useHistory","refresh","setRefresh","setAssets","walletInput","setWalletInput","getWalletAssetsInfo","walletAddress","walletInfo","Object","keys","includes","assetInfoRes","push","Promise","all","assetInfoResResolved","handleSubmit","preventDefault","handleSignOut","message","onSubmit","Divider","MainTheme","children","darkMode","useMediaQuery","createTheme","background","ThemeProvider","CssBaseline","paddingLeft","paddingRight","weIn","shouldLogIn","loggedIn","loggedOut","secondary","home","input","backgroundColor","walletSelectionList","walletSelectionButton","generateLedgerOptions","options","oIndex","MenuItem","Nav","handleSelectLedgerChange","selectedWallet","setSelectedWallet","algoSignerWalletOptions","setAlgoSignerWalletOptions","algoInt","setAlgoInit","handleHomeRedirect","handleConnectWalletSubmit","handleGetAccountsAlgoSigner","handleMyAlgoConnect","warn","AppBar","position","Select","label","Boolean","edge","marginTop","icon","marginLeft","Footer","BottomNavigation","BottomNavigationAction","replace","App","setAccount","setLedger","algodServer","setAlgodServer","indexerServer","setIndexerServer","token","setToken","setAlgodClient","setIndexerClient","REACT_APP_MAINNET_ALGOD_SERVER_URL","REACT_APP_TESTNET_ALGOD_SERVER_URL","REACT_APP_BETANET_ALGOD_SERVER_URL","getAlgoServer","REACT_APP_MAINNET_INDEXER_SERVER_URL","REACT_APP_TESTNET_INDEXER_SERVER_URL","REACT_APP_BETANET_INDEXER_SERVER_URL","getIndexerServer","Algodv2","Indexer","info","getAssetInformationByID","lookupAssetByID","getAccountInformationByID","round","accountInfo","lookupAccountByID","path","exact","render","handleGetTransactionParams","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fba1c99e.chunk.js","sourcesContent":["/**\r\n * Wait For Transaction Confirmation\r\n * @async\r\n * @param {Object} algodClient instance of algod client\r\n * @param {String | Number} trxId transaction id to look for\r\n * @returns {Object} the confirmation response object\r\n */\r\nconst waitForConfirmation = async (algodClient, trxId) => {\r\n  let lastRound = (await algodClient.status().do())['last-round'];\r\n  while (true) {\r\n    const pendingInfo = await algodClient.pendingTransactionInformation(trxId).do();\r\n    if (pendingInfo['confirmed-round'] !== null && pendingInfo['confirmed-round'] > 0) {\r\n      // transaction completed at pendingInfo['confirmed-round']\r\n      return pendingInfo;\r\n    }\r\n    lastRound += 1;\r\n    await algodClient.statusAfterBlock(lastRound).do();\r\n  }\r\n};\r\n/**\r\n * Create Opt In Transaction Object\r\n * @async\r\n * @param {Object} algosdk \r\n * @param {String} sender address string\r\n * @param {Object} params suggested params\r\n * @param {Object} asset asset to opt into\r\n * @returns {Promise} transfer opt in object\r\n */\r\n const createOptInTrx = async (algosdk, sender, params, asset) => {\r\n  try {\r\n    // for opt-in, sender & recipient will be the same address\r\n    const send = sender;\r\n    const recipient = send;\r\n    // We set revocationTarget to undefined as this is not a clawback operation\r\n    const revocationTarget = undefined;\r\n    // CloseReaminerTo is set to undefined as we are not closing out an asset\r\n    const closeRemainderTo = undefined;\r\n    const amount = 0;\r\n    // Construct transaction object\r\n    return await algosdk.makeAssetTransferTxnWithSuggestedParams(\r\n      send,\r\n      recipient,\r\n      closeRemainderTo,\r\n      revocationTarget,\r\n      amount,\r\n      undefined,\r\n      asset?.index,\r\n      params,\r\n    );\r\n  } catch (e) {\r\n    console.error(e);\r\n  }\r\n};\r\n/**\r\n * Create Transfer Transaction Object\r\n * @async\r\n * @param {Object} algosdk \r\n * @param {String} recipient address to receive asset\r\n * @param {Object} params suggested params\r\n * @param {Object} asset asset to obtain\r\n * @param {Number} obtainAmount numerical value to obtain\r\n * @param {String} obtainNote optional note for transaction\r\n * @returns {Promise} transfer transaction object\r\n */\r\nconst createTransferTrx = async (algosdk, recipient, params, asset, obtainAmount, obtainNote) => {\r\n  try {\r\n    // for transfer, transaction will need to come from creator\r\n    const sender = asset?.params?.creator;\r\n    // We set revocationTarget to undefined as this is not a clawback operation\r\n    const revocationTarget = undefined;\r\n    // CloseReaminerTo is set to undefined as we are not closing out an asset\r\n    const closeRemainderTo = undefined;\r\n\r\n    const assetId = asset?.index;\r\n\r\n    const amount = +obtainAmount;\r\n    const note = algosdk.encodeObj(obtainNote);\r\n    // Construct transaction transfer object\r\n    return await algosdk.makeAssetTransferTxnWithSuggestedParams(\r\n      sender,\r\n      recipient,\r\n      closeRemainderTo,\r\n      revocationTarget,\r\n      amount,\r\n      note,\r\n      assetId,\r\n      params,\r\n    );\r\n  } catch (e) {\r\n    console.error(e);\r\n  }\r\n};\r\n/**\r\n * Get Algod Server Url\r\n * @param {String} ledger ledger option\r\n * @returns {String} appropriate string process env value if present\r\n */\r\nconst getAlgoServer = (ledger, env) => {\r\n  switch(ledger) {\r\n    case 'MainNet':\r\n      return env.REACT_APP_MAINNET_ALGOD_SERVER_URL;\r\n    case 'TestNet':\r\n      return env.REACT_APP_TESTNET_ALGOD_SERVER_URL;\r\n    case 'BetaNet':\r\n      return env.REACT_APP_BETANET_ALGOD_SERVER_URL;\r\n    default:\r\n      return '';\r\n  }\r\n}\r\n/**\r\n * Get Indexer Server Url\r\n * @param {String} ledger ledger option\r\n * @returns {String} appropriate string process env value if present\r\n */\r\nconst getIndexerServer = (ledger, env) => {\r\n  switch(ledger) {\r\n    case 'MainNet':\r\n      return env.REACT_APP_MAINNET_INDEXER_SERVER_URL;\r\n    case 'TestNet':\r\n      return env.REACT_APP_TESTNET_INDEXER_SERVER_URL;\r\n    case 'BetaNet':\r\n      return env.REACT_APP_BETANET_INDEXER_SERVER_URL;\r\n    default:\r\n      return '';\r\n  }\r\n}\r\n/**\r\n * Get Appropriate PureStake API Key\r\n * @param {String} ledger ledger option\r\n * @returns {String} appropriate string process env value if present\r\n */\r\nconst getPureStakeAPIToken = (ledger, env) => {\r\n  switch(ledger) {\r\n    case 'MainNet':\r\n      return env.REACT_APP_MAINNET_PURESTAKE_API_KEY;\r\n    case 'TestNet':\r\n      return env.REACT_APP_TESTNET_PURESTAKE_API_KEY;\r\n    case 'BetaNet':\r\n      return env.REACT_APP_BETANET_PURESTAKE_API_KEY;\r\n    default:\r\n      return '';\r\n  }\r\n}\r\n\r\nexport {\r\n  waitForConfirmation,\r\n  createOptInTrx,\r\n  getAlgoServer,\r\n  getIndexerServer,\r\n  getPureStakeAPIToken,\r\n  createTransferTrx,\r\n};\r\n","var CryptoJS = require('crypto-js');\r\n/**\r\n * Comma Format\r\n * @param {Number} n to format\r\n * @returns {String} number value with commas\r\n */\r\nexport const commaFormat = (n) => {\r\n  if (!n) return n;\r\n  return String(n)?.split('')?.reverse()?.map((char, i) => {\r\n    if (i % 3 === 0 && i !== 0) {\r\n      return `${char},`;\r\n    }\r\n    return char;\r\n  })?.reverse()?.join('');\r\n}\r\n/**\r\n * Capitalize\r\n * @param {string} s some camel case string probably\r\n * @returns {string} Capitalize Case String With Spaces\r\n */\r\nexport const capitalize = (s) => {\r\n  const upperCase = s.substring(0, 1).toUpperCase() + s.substring(1);\r\n  const reg = /([A-Z])/g;\r\n  return upperCase.replace(reg, ' $1');\r\n}\r\n\r\nexport const dollarFormat = (n) => `$${n}`;\r\n\r\nexport const decrypt = (text, key) => {\r\n  const decrypted = CryptoJS.AES.decrypt(text, key);\r\n  // encode decrypted buffer to utf8 string\r\n  return decrypted.toString(CryptoJS.enc.Utf8);\r\n};\r\n\r\nexport default dollarFormat;\r\n","/* global AlgoSigner */\r\n// React\r\nimport React, { useState, useEffect } from 'react';\r\n// MyAglo\r\nimport MyAlgoConnect from '@randlabs/myalgo-connect';\r\n// MUI\r\nimport Card from '@material-ui/core/Card';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/styles';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport Pagination from '@material-ui/lab/Pagination';\r\n// Icons\r\nimport ExpandLessIcon from '@material-ui/icons/ExpandLess';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\n// Utilities\r\nimport {\r\n  waitForConfirmation,\r\n  createOptInTrx,\r\n  createTransferTrx,\r\n} from '../utilities/algo';\r\nimport { decrypt } from '../utilities/formatUtil';\r\n// Classes\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n  },\r\n  card: {\r\n    maxWidth: theme.spacing(50),\r\n    minWidth: theme.spacing(30),\r\n  },\r\n  cardActions: {\r\n    display: 'flex',\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n    padding: `0px ${theme.spacing(1)}px`,\r\n  },\r\n  notSelectedWallet: {\r\n    opacity: '75%',\r\n  },\r\n  pagination: {\r\n    '& ul li .Mui-selected': {\r\n      color: theme.palette.primary.main,\r\n    },\r\n  },\r\n  obtainAssetInfo: {\r\n    margin: 'auto',\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    padding: theme.spacing(1),\r\n  },\r\n  assetAmountTable: {\r\n    border: `1px #000 solid`,\r\n    marginBottom: theme.spacing(1),\r\n  },\r\n}));\r\n\r\nconst INITOBTAINASSETAMOUNT = 0;\r\nconst INITOBTAINASSETNOTE = '';\r\n\r\nconst AssetListComponent = (props) => {\r\n  const {\r\n    algodClient,\r\n    user,\r\n    algosdk,\r\n    handleUpdateAccountInfo,\r\n    assetIdList,\r\n    page,\r\n    setPage,\r\n    activeAssetId,\r\n    setActiveAssetId,\r\n    handleGetAssetInfo,\r\n    indexerClient,\r\n    ledger,\r\n  } = props;\r\n  const classes = useStyles();\r\n\r\n  const SigningMethods = (props) => {\r\n    const {\r\n      handleAssetByAlgoSigner,\r\n      handleAssetByMyAlgoConnect\r\n    } = props;\r\n    return (\r\n      <CardContent>\r\n        <Typography>\r\n          Transaction Signing Methods:\r\n        </Typography>\r\n        <Button\r\n          disabled={AlgoSigner === undefined || AlgoSigner === null}\r\n          onClick={() => handleAssetByAlgoSigner()}\r\n          variant=\"contained\"\r\n        >\r\n          AlgoSigner\r\n        </Button>\r\n        <Button\r\n          onClick={() => handleAssetByMyAlgoConnect()}\r\n          variant=\"contained\"\r\n        >\r\n          MyAlgo Connect\r\n        </Button>\r\n      </CardContent>\r\n    );\r\n  };\r\n  const [assetCollapse, setAssetCollapse] = useState(false);\r\n  const [assetOptInCollaspe, setAssetOptInCollapse] = useState(false);\r\n  const [obtainAssetAmount, setObtainAssetAmount] = useState(INITOBTAINASSETAMOUNT);\r\n  const [obtainAssetNote, setObtainAssetNote] = useState(INITOBTAINASSETNOTE);\r\n  const [assetObtainCollape, setAssetObtainCollapse] = useState(false);\r\n  const [assetRefresh, setAssetRefresh] = useState(false);\r\n  const [algoSignerWallets, setAlgoSignerWallets] = useState(null);\r\n  const [algoSignerWalletSelected, setAlgoSignerWalletSelected] = useState(null);\r\n  const [activeAsset, setActiveAsset] = useState(null);\r\n  const [userAssetTotals, setUserAssetTotals] = useState({\r\n    userTotal: 0,\r\n    assetAvailable: 0,\r\n    assetTotal: 0,\r\n  });\r\n  const [userOptedIn, setUserOptedIn] = useState(false);\r\n  /**\r\n   * Handle Toggle Asset Collapse At Index Given\r\n   * @param {number} index the numerical index of the ASA\r\n   * @returns {null}\r\n   * @fires setAssetCollapse update attribute at passed index\r\n   */\r\n  const handleToggleAssetCollapse = () => setAssetCollapse(!assetCollapse);\r\n  const handleToggleOptInCollapse = () => setAssetOptInCollapse(!assetOptInCollaspe);\r\n  const handleToggleObtainAssetCollapse = () => setAssetObtainCollapse(!assetObtainCollape);\r\n\r\n  const handleObtainAssetAmountChange = (e) => {\r\n    if (+e.target.value <= +userAssetTotals?.assetAvailable) {\r\n      setObtainAssetAmount(+e.target.value);\r\n    }\r\n  }\r\n  const handleAssetRefresh = (value) => {\r\n    setAssetRefresh(value);\r\n  }\r\n  const handleObtainAssetNoteChange = (e) => {\r\n    setObtainAssetNote(e.target.value);\r\n  }\r\n  /**\r\n   * Get Transaction Parameters\r\n   * @async\r\n   * @returns {Promise} algoClient.getTransactionParams().do()\r\n   */\r\n  const getTransactionParams = async () => {\r\n    try {\r\n      return await algodClient.getTransactionParams().do();\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n  }\r\n  const userHasOptedInToAsset = (assetId, userAssets) => {\r\n    let result = false;\r\n    if (Array.isArray(userAssets) && userAssets?.length > 0) {\r\n      userAssets?.forEach((uAsset) => {\r\n        if (uAsset?.amount >= 0 && uAsset?.['asset-id'] === assetId) {\r\n          result = true;\r\n        }\r\n      });\r\n    }\r\n    return result;\r\n  }\r\n  const handleGetAlgoSignerWallets = async () => {\r\n    // this just connects to AlgoSigner, user will need to choose account to use\r\n    if (AlgoSigner) {\r\n      await AlgoSigner.connect();\r\n      const accounts = await AlgoSigner.accounts({\r\n        ledger,\r\n      });\r\n      setAlgoSignerWallets(accounts);\r\n      return null;\r\n    } else {\r\n      setAlgoSignerWallets([{\r\n        address: 'AlgoSigner not detected',\r\n      }]);\r\n    }\r\n  }\r\n  const handleOptIn = async (signMethod, asset) => {\r\n    switch(signMethod) {\r\n      case 'AlgoSigner':\r\n        if (algoSignerWalletSelected === null) {\r\n          console.error('Please select valid wallet');\r\n          return null;\r\n        }\r\n        handleAssetRefresh(true);\r\n        try {\r\n          const params = await getTransactionParams();\r\n          const optInTrx = createOptInTrx(\r\n            algosdk,\r\n            algoSignerWalletSelected,\r\n            params,\r\n            asset,\r\n          );\r\n          // Encode to base64 text\r\n          const base64Tx = AlgoSigner.encoding.msgpackToBase64(optInTrx.toByte());\r\n          // sign with AlgoSigner\r\n          const signedTx = await AlgoSigner.signTxn([{ txn: base64Tx }]);\r\n          // Send signed transaction\r\n          // TODO: implement Ledger Handling\r\n          const submittedSignedTrx = await AlgoSigner.send({\r\n            ledger,\r\n            tx: signedTx[0]?.blob,\r\n          });\r\n          // Wait for confirmation\r\n          await waitForConfirmation(algodClient, submittedSignedTrx.txId);\r\n          // Update Account Info\r\n          await handleUpdateAccountInfo(user.current.account.address);\r\n\r\n          return null;\r\n        } catch (e) {\r\n          console.error(e);\r\n        } finally {\r\n          handleAssetRefresh(false);\r\n          return null;\r\n        }\r\n      case 'MyAlgoConnect':\r\n        handleAssetRefresh(true);\r\n        try {\r\n          // init myAlgoConnect\r\n          const myAlgoConnect = new MyAlgoConnect({ disableLedgerNano: false });\r\n          // Get Desired Account\r\n          await myAlgoConnect.connect({\r\n            shouldSelectOneAccount: false,\r\n            openManager: true,\r\n          });\r\n          // Get Params\r\n          const params = await getTransactionParams();\r\n          // Create OptIn Transaction\r\n          const optInTrx = await createOptInTrx(\r\n            algosdk,\r\n            user?.account?.address,\r\n            params,\r\n            asset,\r\n          );\r\n          // Sign & Submit Transaction\r\n          const signedTrx = await myAlgoConnect.signTransaction(optInTrx.toByte());\r\n          // Send Signed Transaction\r\n          await algodClient.sendRawTransaction(signedTrx.blob).do();\r\n          // Wait for confirmation\r\n          await waitForConfirmation(algodClient, signedTrx.txID);\r\n          // Update Account Info\r\n          await handleUpdateAccountInfo(user?.account?.address);\r\n\r\n          return null;\r\n        } catch (e) {\r\n          console.error(e);\r\n        } finally {\r\n          handleAssetRefresh(false);\r\n          return null;\r\n        }\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n  const handlePaginationChange = (e, v) => {\r\n    setPage(v);\r\n  };\r\n  /**\r\n   * Handle Transfer Transaction\r\n   * @async\r\n   * @returns {null}\r\n   */\r\n  const handleTransferTransaction = async () => {\r\n    handleAssetRefresh(true);\r\n    try {\r\n      // get suggested params\r\n      const params = await getTransactionParams();\r\n      // create transfer transaction\r\n      const transferTrx = await createTransferTrx(\r\n        algosdk,\r\n        user?.account?.address,\r\n        params,\r\n        activeAsset,\r\n        obtainAssetAmount,\r\n        obtainAssetNote,\r\n      );\r\n      // derive sk from mnemonic\r\n      const account = algosdk.mnemonicToSecretKey(\r\n        decrypt(\r\n          process.env.REACT_APP_BASE_WALLET_MNEMONIC_ENCRYPTED,\r\n          process.env.REACT_APP_WALLET_MNEMONIC_KEY,\r\n        ));\r\n      // Sign transfer transaction\r\n      const rawSignedTxn = transferTrx.signTxn(account?.sk);\r\n      // submit transaction\r\n      await algodClient.sendRawTransaction(rawSignedTxn).do();\r\n      // Wait for confirmation\r\n      await waitForConfirmation(algodClient, transferTrx.txID().toString());\r\n      // update account info\r\n      await handleUpdateAccountInfo(user.account.address);\r\n\r\n      return null;\r\n    } catch (e) {\r\n      console.error(e);\r\n    } finally {\r\n      handleAssetRefresh(false);\r\n      return null;\r\n    }\r\n  };\r\n\r\n  // update active asset id based on which page user is on\r\n  useEffect(() => {\r\n    // resest active asset to null so component refreshes visually\r\n    setActiveAsset(null);\r\n    setActiveAssetId(assetIdList[page - 1]);\r\n  }, [activeAssetId, assetIdList, page, setActiveAssetId]);\r\n  // update active asset state based on active asset id\r\n  useEffect(() => {\r\n    const getAssetInfo = async (id) => {\r\n      const assetInfo = await handleGetAssetInfo(id);\r\n      setActiveAsset(assetInfo?.asset);\r\n    };\r\n    if (String(activeAssetId)?.length > 0) {\r\n      getAssetInfo(activeAssetId);\r\n    }\r\n  }, [activeAssetId, handleGetAssetInfo]);\r\n\r\n  // get user asset amount\r\n  useEffect(() => {\r\n    const getAmounts = async () => {\r\n      const getUserAssetAmount = async (asset) => {\r\n        const result = {\r\n          userTotal: 0,\r\n          assetAvailable: 0,\r\n          assetTotal: asset?.params?.total,\r\n        };\r\n        const indexerResult = await indexerClient.lookupAssetBalances(asset?.index).do();\r\n        let walletIndex = 0;\r\n        while (walletIndex < indexerResult?.balances?.length) {\r\n          if (indexerResult?.balances[walletIndex]?.address === process.env.REACT_APP_BASE_WALLET_ADDRESS) {\r\n            result.assetAvailable = indexerResult?.balances[walletIndex]?.amount;\r\n          }\r\n          if (indexerResult?.balances[walletIndex]?.address === user?.account?.address) {\r\n            result.userTotal = indexerResult?.balances[walletIndex]?.amount;\r\n          }\r\n          walletIndex += 1;\r\n        }\r\n        return result;\r\n      };\r\n      if (activeAsset !== null && assetObtainCollape) {\r\n        setUserAssetTotals(await getUserAssetAmount(activeAsset));\r\n      }\r\n    }\r\n    // get asset amounts & update state\r\n    getAmounts();\r\n  }, [activeAsset, user?.account, indexerClient, assetObtainCollape]);\r\n  // check if user has opted into asset\r\n  useEffect(() => {\r\n    if (activeAsset !== null) {\r\n      setUserOptedIn(userHasOptedInToAsset(activeAsset?.index, user?.account?.assets));\r\n    }\r\n  }, [activeAsset, user]);\r\n  // reset state if change page or refresh asset\r\n  useEffect(() => {\r\n    setAssetCollapse(false);\r\n    setAssetOptInCollapse(false);\r\n    setAssetObtainCollapse(false);\r\n    setObtainAssetAmount(INITOBTAINASSETAMOUNT);\r\n    setObtainAssetNote(INITOBTAINASSETNOTE);\r\n    setAlgoSignerWallets(null);\r\n    setAlgoSignerWalletSelected(null);\r\n    setUserAssetTotals({\r\n      userTotal: 0,\r\n      assetAvailable: 0,\r\n      assetTotal: 0,\r\n    });\r\n  }, [page, assetRefresh]);\r\n  \r\n  return (\r\n    <div className={classes.root}>\r\n      <>\r\n        <Card\r\n          component={Paper}\r\n          className={classes.card}\r\n        >\r\n          {assetRefresh ? <LinearProgress /> : activeAsset !== null\r\n            ? (\r\n              <>\r\n                <CardContent>\r\n                  <Typography>\r\n                    {activeAsset?.params?.name}\r\n                  </Typography>\r\n                </CardContent>\r\n                <CardActions className={classes.cardActions}>\r\n                  <>\r\n                    <IconButton\r\n                      onClick={() => handleToggleAssetCollapse()}\r\n                      title='Additional Information'\r\n                    >\r\n                      {assetCollapse\r\n                        ? <ExpandLessIcon />\r\n                        : <ExpandMoreIcon />}\r\n                    </IconButton>\r\n                  </>\r\n                  {userOptedIn\r\n                    ? (\r\n                      <Button\r\n                        onClick={() => handleToggleObtainAssetCollapse()}\r\n                        color={assetObtainCollape\r\n                          ? 'primary' : 'inherit'}\r\n                      >\r\n                        Obtain Asset\r\n                      </Button>\r\n                    ) : (\r\n                      <Button\r\n                        onClick={() => handleToggleOptInCollapse(activeAsset?.index)}\r\n                        color={assetOptInCollaspe\r\n                          ? 'primary' : 'inherit'}\r\n                      >\r\n                        Opt-In\r\n                      </Button>\r\n                    )}\r\n                </CardActions>\r\n              </>\r\n            ) : <LinearProgress />}\r\n            {/* Various Collapses (Additional Info, OptIn & Transfer Trx Signing Methods, etc) */}\r\n            <Collapse\r\n              in={assetCollapse}\r\n              timeout=\"auto\"\r\n              unmountOnExit\r\n              className={classes.card}\r\n            >\r\n              <CardContent>\r\n                <Typography>Additional Info For Asset: {activeAsset?.index}</Typography>\r\n              </CardContent>\r\n            </Collapse>\r\n            <Collapse\r\n              in={assetOptInCollaspe}\r\n              timeout=\"auto\"\r\n              unmountOnExit\r\n              className={classes.card}\r\n            >\r\n              <SigningMethods\r\n                handleAssetByAlgoSigner={() => handleGetAlgoSignerWallets()}\r\n                handleAssetByMyAlgoConnect={() => handleOptIn('MyAlogConnect', activeAsset)}\r\n              />\r\n            </Collapse>\r\n            <Collapse\r\n              in={assetObtainCollape}\r\n              timeout=\"auto\"\r\n              unmountOnExit\r\n              className={classes.card}\r\n            >\r\n              <div className={classes.obtainAssetInfo}>\r\n                <table className={classes.assetAmountTable}>\r\n                  <thead>\r\n                    <tr>\r\n                      <td>Owned</td>\r\n                      <td>Available</td>\r\n                      <td>Total</td>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    <tr>\r\n                      <td>{userAssetTotals?.userTotal}</td>\r\n                      <td>{userAssetTotals?.assetAvailable}</td>\r\n                      <td>{userAssetTotals?.assetTotal}</td>\r\n                    </tr>\r\n                  </tbody>\r\n                </table>\r\n                <Typography>Amount</Typography>\r\n                <TextField\r\n                  type=\"number\"\r\n                  onChange={(e) => handleObtainAssetAmountChange(e)}\r\n                  value={obtainAssetAmount}\r\n                />\r\n                <TextField\r\n                  placeholder='Note (optional)'\r\n                  onChange={handleObtainAssetNoteChange}\r\n                />\r\n                <Button\r\n                  disabled={obtainAssetAmount <= 0}\r\n                  onClick={handleTransferTransaction}\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                >\r\n                  Confirm\r\n                </Button>\r\n              </div>\r\n            </Collapse>\r\n            <Collapse\r\n              in={algoSignerWallets !== null\r\n                && algoSignerWallets?.length > 0\r\n                && (assetOptInCollaspe\r\n                  || assetObtainCollape)\r\n              }\r\n              timeout=\"auto\"\r\n              unmountOnExit\r\n              className={classes.card}\r\n            >\r\n              {algoSignerWallets !== null && algoSignerWallets?.length > 0\r\n                ? (\r\n                  <CardContent>\r\n                    {algoSignerWallets?.map((asW, i) => (\r\n                      <Button\r\n                        key={i}\r\n                        onClick={() => setAlgoSignerWalletSelected(asW?.address)}\r\n                        color={algoSignerWalletSelected !== null\r\n                          && asW?.address === algoSignerWalletSelected\r\n                          ? 'primary' : 'inherit'}\r\n                        variant=\"contained\"\r\n                        className={algoSignerWalletSelected !== null\r\n                          && asW?.address === algoSignerWalletSelected\r\n                          ? null : classes.notSelectedWallet}\r\n                      >\r\n                        {asW?.address}\r\n                      </Button>\r\n                    ))}\r\n                    {algoSignerWalletSelected !== null\r\n                      ? (\r\n                        <Button\r\n                          onClick={!userOptedIn\r\n                            ? () => handleOptIn('AlgoSigner', activeAsset)\r\n                            : () => handleTransferTransaction()\r\n                          }\r\n                        >\r\n                          Confirm\r\n                        </Button>\r\n                      ) : null}\r\n                  </CardContent>\r\n                ) : null}\r\n            </Collapse>\r\n        </Card>\r\n      </>\r\n      <Pagination\r\n        className={classes.pagination}    \r\n        count={assetIdList?.length}\r\n        page={page}\r\n        onChange={handlePaginationChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AssetListComponent;\r\n","import React, { useRef, useState } from 'react';\r\n// MUI\r\nimport { makeStyles } from '@material-ui/core';\r\nimport Typography from '@material-ui/core/Typography';\r\n// Custom\r\nimport AssetListComponent from '../components/AssetListComponent';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    paddingTop: '8px',\r\n    justifyContent: 'center',\r\n    '& .MuiInputBase-root': {\r\n      margin: 'auto',\r\n      maxWidth: theme.spacing(35),\r\n    },\r\n  },\r\n}));\r\n\r\nconst LandingPage = (props) => {\r\n  const classes = useStyles();\r\n  const {\r\n    user,\r\n    handleGetAccountInfo,\r\n    handleGetAssetInfo,\r\n    algosdk,\r\n    algodClient,\r\n    handleSetAccount,\r\n    ledger,\r\n    indexerClient,\r\n  } = props;\r\n  const assets = useRef();\r\n  const [assetIdList] = useState(user?.account?.assets?.map((a) => a['asset-id']));\r\n  const [page, setPage] = useState(1);\r\n  const [activeAssetId, setActiveAssetId] = useState('');\r\n  /**\r\n   * Handle Updating Account Info\r\n   * @param {Object} addr wallet address information object returned from algo adk indexer\r\n   * @fires handleSetAccount\r\n   * @returns {Object} the updated account info\r\n   */\r\n  const handleUpdatingAccountInfo = async (addr) => {\r\n    const updatedAccountInfo = await handleGetAccountInfo(addr);\r\n    handleSetAccount(updatedAccountInfo);\r\n    return updatedAccountInfo;\r\n  };\r\n  \r\n  return user === null || user === undefined\r\n    ? null\r\n    : (\r\n      <div className={classes.root}>\r\n        <div>\r\n          <Typography variant=\"subtitle1\" color=\"primary\">\r\n            Real Estate For The Digital Age\r\n          </Typography>\r\n          <AssetListComponent\r\n            assets={assets.current}\r\n            algodClient={algodClient}\r\n            user={user}\r\n            algosdk={algosdk}\r\n            handleUpdateAccountInfo={handleUpdatingAccountInfo}\r\n            handleGetAssetInfo={handleGetAssetInfo}\r\n            assetIdList={assetIdList}\r\n            page={page}\r\n            setPage={setPage}\r\n            activeAssetId={activeAssetId}\r\n            setActiveAssetId={setActiveAssetId}\r\n            indexerClient={indexerClient}\r\n            ledger={ledger}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n};\r\n\r\nexport default LandingPage;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useHistory } from 'react-router';\r\n// MUI\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport Divider from '@material-ui/core/Divider';\r\n// Util\r\nimport { commaFormat } from '../utilities/formatUtil';\r\n\r\nconst ProfilePage = (props) => {\r\n  const {\r\n    account,\r\n    handleSetAccount,\r\n    handleGetAccountInfo,\r\n    handleGetAssetInfo,\r\n  } = props;\r\n  const history = useHistory();\r\n  const [refresh, setRefresh] = useState(false);\r\n  const [assets, setAssets] = useState(null);\r\n  const [walletInput, setWalletInput] = useState('');\r\n  /**\r\n   * Get Wallet & Asset Info\r\n   * @param {string} walletAddress the wallet you want info for\r\n   * @returns {Object} account obj & current round\r\n   * @fires setAssets with any assets associated with the wallet address (maybe\r\n   *  this changes to only display assets that match what main wallet has) (\r\n   *  only want to show assets in wallet that are also in main wallet i guess)\r\n   */\r\n  const getWalletAssetsInfo = async (walletAddress) => {\r\n    const walletInfo = await handleGetAccountInfo(walletAddress);\r\n    if (typeof walletInfo === 'object' && Object.keys(walletInfo).includes('account')) {\r\n      const assetInfoRes = [];\r\n      if (Array.isArray(walletInfo.account?.assets)) {\r\n        walletInfo.account.assets.forEach((asset) => {\r\n          assetInfoRes.push(handleGetAssetInfo(asset['asset-id']));\r\n        });\r\n      }\r\n      const assetInfoResResolved = await Promise.all(assetInfoRes);\r\n      if (Array.isArray(assetInfoResResolved) && assetInfoResResolved?.length > 0) {\r\n        setAssets(assetInfoResResolved);\r\n      }\r\n    }\r\n    setRefresh(true);\r\n    return walletInfo;\r\n  }\r\n  /**\r\n   * Handle Submit\r\n   * @async\r\n   * @fires handleSetAccount\r\n   * @param {Object} e event\r\n   */\r\n  const handleSubmit = async (e) => {\r\n    e?.preventDefault();\r\n    const walletInfo = await getWalletAssetsInfo(walletInput);\r\n    handleSetAccount(walletInfo);\r\n  }\r\n  /**\r\n   * Handle Sign Out\r\n   * @fires setRefresh\r\n   * @fires setAssets\r\n   * @fires handleSetAccount\r\n   * @fires history.push\r\n   */\r\n  const handleSignOut = () => {\r\n    setRefresh(true);\r\n    setAssets(null);\r\n    handleSetAccount(undefined);\r\n    history.push('/reach_for_algo');\r\n  };\r\n  // handle refresh\r\n  useEffect(() => {\r\n    if (refresh) {\r\n      setRefresh(false);\r\n    }\r\n  }, [refresh]);\r\n  // grab assets associated with logged in wallet\r\n  useEffect(() => {\r\n    if (assets === null && account?.account !== undefined) {\r\n      getWalletAssetsInfo(account?.account?.address);\r\n    }\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [account?.account, assets]);\r\n\r\n  return (\r\n    <div>\r\n      <>\r\n        {refresh\r\n          ? <LinearProgress />\r\n          : account !== undefined\r\n            ? Object?.keys(account)?.includes('account')\r\n              ? (\r\n                <>\r\n                  <Typography>\r\n                    My Account: {account?.account?.address}\r\n                  </Typography>\r\n                  <Typography>\r\n                    {commaFormat(account.account?.amount)} microAlgos\r\n                  </Typography>\r\n                  <Button onClick={handleSignOut}>Sign Out</Button>\r\n                </>\r\n              )\r\n              : Object.keys(account)?.includes('message')\r\n                ? (\r\n                  <>\r\n                    <Typography>\r\n                      {account?.message}\r\n                    </Typography>\r\n                    <Button onClick={handleSignOut}>Sign Out</Button>\r\n                  </>\r\n                )\r\n                : null\r\n            : (\r\n              <form onSubmit={handleSubmit}>\r\n                <Typography>Login With Wallet Address</Typography>\r\n                <TextField\r\n                  value={walletInput}\r\n                  onChange={(e) => setWalletInput(e.target.value)}\r\n                />\r\n                <Button type=\"submit\">Submit</Button>\r\n              </form>\r\n            )}\r\n        {Array.isArray(assets) && assets?.length > 0\r\n          ? (\r\n            <div>\r\n              <Typography>My Assets</Typography>\r\n              <Divider />\r\n              {assets?.map(({ asset }, i) => (\r\n                <div key={i}>\r\n                  <Typography>{asset?.params?.name}</Typography>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          ) : null}\r\n      </>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ProfilePage;\r\n","import React from 'react';\r\nimport { createTheme, ThemeProvider } from '@material-ui/core/styles';\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\n\r\n\r\nconst MainTheme = ({ children }) => {\r\n  const darkMode = useMediaQuery('(prefers-color-scheme: dark)');\r\n  \r\n  const theme = createTheme({\r\n    palette: {\r\n      type: darkMode ? 'dark' : 'light',\r\n      background: {\r\n        main: '#282c34',\r\n      },\r\n    },\r\n  });\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <CssBaseline />\r\n      {children}\r\n    </ThemeProvider>\r\n);\r\n}\r\n\r\nexport default MainTheme;\r\n","/* global AlgoSigner */\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useHistory } from 'react-router';\r\n// MyAglo\r\nimport MyAlgoConnect from '@randlabs/myalgo-connect';\r\n// MUI\r\nimport { makeStyles } from '@material-ui/core';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport AccountCircle from '@material-ui/icons/AccountCircle';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    paddingLeft: theme.spacing(2),\r\n    paddingRight: theme.spacing(2),\r\n  },\r\n  weIn: {\r\n    display: 'flex',\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n  },\r\n  shouldLogIn: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    margin: 'auto',\r\n    paddingTop: theme.spacing(1),\r\n  },\r\n  loggedIn: {\r\n    color: '#242729',\r\n  },\r\n  loggedOut: {\r\n    color: theme.palette.text.secondary,\r\n  },\r\n  home: {\r\n    color: theme.palette.text.secondary,\r\n  },\r\n  input: {\r\n    backgroundColor: theme.palette.background.main,\r\n    padding: theme.spacing(1),\r\n    marginBottom: theme.spacing(1),\r\n  },\r\n  walletSelectionList: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n  },\r\n  walletSelectionButton: {\r\n    marginBottom: theme.spacing(1),\r\n  },\r\n}));\r\n/**\r\n * Generate Ledger Options\r\n * @param {Array} options which ledgers to support\r\n * @returns {Array} MenuItem array with given options as values\r\n */\r\nconst generateLedgerOptions = (options) => {\r\n  let oIndex = 0;\r\n  const result = [];\r\n  while (oIndex < options?.length) {\r\n    result.push(\r\n      <MenuItem\r\n        value={options[oIndex]}\r\n        key={oIndex}\r\n      >\r\n        {options[oIndex]}\r\n      </MenuItem>\r\n    );\r\n    oIndex += 1;\r\n  }\r\n  return result;\r\n};\r\n\r\nconst Nav = (props) => {\r\n  // user obj\r\n  const {\r\n    user,\r\n    ledger,\r\n    handleSelectLedgerChange,\r\n    handleGetAccountInfo,\r\n    handleSetAccount,\r\n  } = props;\r\n  const [selectedWallet, setSelectedWallet] = useState('');\r\n  const [algoSignerWalletOptions, setAlgoSignerWalletOptions] = useState(null);\r\n  const [algoInt, setAlgoInit] = useState(false);\r\n  // css\r\n  const classes = useStyles();\r\n  // to redirect\r\n  const history = useHistory();\r\n  // redirect handlers\r\n  const handleHomeRedirect = () => history.push('/reach_for_algo');\r\n  const handleProfileRedirect = () => history.push('/profile');\r\n  /**\r\n   * Handle Connect Wallet Submit\r\n   * @async\r\n   * @param {String} addr wallet address to update with\r\n   * @fires setSelectedWallet to given address\r\n   * @fires handleSetAccount with updated account info\r\n   * @fires handleHomeRedirect idk why it kept going to profile page\r\n   * @fires setSelectedWallet back to init\r\n   * @fires setAlgoSignerWalletOptions back to init\r\n   */\r\n  const handleConnectWalletSubmit = async (addr) => {\r\n    // update account into\r\n    setSelectedWallet(addr);\r\n    const updatedAccountInfo = await handleGetAccountInfo(addr);\r\n    handleSetAccount(updatedAccountInfo);\r\n    handleHomeRedirect();\r\n    setSelectedWallet('');\r\n    setAlgoSignerWalletOptions(null);\r\n  };\r\n  /**\r\n   * Handle Get Accounts To Select From Algo Signer\r\n   * @async\r\n   * @fires setAlgoSignerWalletOptions\r\n   */\r\n  const handleGetAccountsAlgoSigner = async () => {\r\n    await AlgoSigner?.connect();\r\n    const accounts = await AlgoSigner?.accounts({\r\n      ledger,\r\n    });\r\n    setAlgoSignerWalletOptions(accounts);\r\n  };\r\n  /**\r\n   * Handle Wallet Connect via MyAlgo\r\n   * @async\r\n   * @fires handleConnectWalletSubmit\r\n   */\r\n  const handleMyAlgoConnect = async () => {\r\n    // use my algo connect to get account options\r\n    const myAlgoConnect = new MyAlgoConnect({ disableLedgerNano: false });\r\n    // throw in try catch block to handle if user cancels prompt\r\n    try {\r\n      const accounts = await myAlgoConnect.connect({\r\n        openManager: true,\r\n      });\r\n      if (Array.isArray(accounts)) {\r\n        // update user via handleConnectWalletSubmit\r\n        await handleConnectWalletSubmit(accounts?.[0]?.address);\r\n      }\r\n    } catch (e) {\r\n      console.warn(e);\r\n    }\r\n  };\r\n  // Check if AlgoSigner is available\r\n  useEffect(() => {\r\n    if (typeof AlgoSigner !== 'undefined') {\r\n      setAlgoInit(AlgoSigner);\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <AppBar\r\n      position=\"static\"\r\n      className={classes.root}\r\n    >\r\n      {user === null || user === undefined\r\n        ? (\r\n          <div className={classes.shouldLogIn}>\r\n            <Typography>Choose Ledger</Typography>\r\n            <Select\r\n              label=\"Ledger\"\r\n              title=\"Ledger\"\r\n              onChange={handleSelectLedgerChange}\r\n              value={ledger}\r\n              className={classes.input}\r\n            >\r\n              {generateLedgerOptions(['MainNet', 'TestNet', 'BetaNet'])}\r\n            </Select>\r\n            <Typography>Choose Wallet</Typography>\r\n            <div\r\n              className={`${classes.input} ${classes.walletSelectionList}`}\r\n            >\r\n              <Button\r\n                variant=\"outlined\"\r\n                color=\"primary\"\r\n                className={classes.walletSelectionButton}\r\n                disabled={!Boolean(algoInt)}\r\n                onClick={handleGetAccountsAlgoSigner}\r\n              >\r\n                AlgoSigner\r\n                {!Boolean(algoInt) ? ' not detected' : ''}\r\n              </Button>\r\n              <Button\r\n                variant=\"outlined\"\r\n                color=\"primary\"\r\n                className={classes.walletSelectionButton}\r\n                onClick={handleMyAlgoConnect}\r\n              >\r\n                MyAlgo Connect\r\n              </Button>\r\n              <Button\r\n                variant=\"outlined\"\r\n                color=\"primary\"\r\n                disabled={true}\r\n              >\r\n                Algorand Mobile Wallet? (TODO)\r\n              </Button>\r\n            </div>\r\n            {algoSignerWalletOptions?.length > 0\r\n              ? (\r\n                <>\r\n                  <Typography>Available Wallets</Typography>\r\n                  <div className={`${classes.input} ${classes.walletSelectionList}`}>\r\n                    {algoSignerWalletOptions?.map(({ address }, i) => (\r\n                      <Button\r\n                        variant=\"outlined\"\r\n                        key={i + address}\r\n                        color={address === selectedWallet ? \"inherit\" : \"primary\"}\r\n                        className={i !== algoSignerWalletOptions?.length\r\n                          ? classes.walletSelectionButton : null}\r\n                        onClick={() => handleConnectWalletSubmit(address)}\r\n                      >\r\n                        {address}\r\n                      </Button>\r\n                    ))}\r\n                  </div>\r\n                </>\r\n              ) : null}\r\n          </div>\r\n        ) : (\r\n          <div className={classes.weIn}>\r\n            <IconButton\r\n              edge=\"start\"\r\n              aria-label=\"home\"\r\n              onClick={handleHomeRedirect}\r\n              className={classes.home}\r\n            >\r\n              <HomeIcon />\r\n              {ledger?.length > 0 ? (\r\n                <Typography>\r\n                  {ledger}\r\n                </Typography>\r\n              ) : ''}\r\n            </IconButton>\r\n            <IconButton\r\n              aria-label=\"account of current user\"\r\n              aria-controls=\"menu-appbar\"\r\n              className={user === null\r\n                ? classes.loggedIn : classes.loggedOut}\r\n              aria-haspopup=\"true\"\r\n              onClick={handleProfileRedirect}\r\n              color=\"inherit\"\r\n            >\r\n              <AccountCircle />\r\n            </IconButton>\r\n          </div>\r\n        )}\r\n    </AppBar>\r\n  );\r\n};\r\n\r\nexport default Nav;\r\n","import React from 'react';\r\nimport { useHistory } from 'react-router';\r\n// MUI\r\nimport BottomNavigation from '@material-ui/core/BottomNavigation';\r\nimport BottomNavigationAction from '@material-ui/core/BottomNavigationAction';\r\nimport { makeStyles } from '@material-ui/core';\r\n// Icons\r\nimport HomeIcon from '@material-ui/icons/Home';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n    flexDirection: 'row',\r\n    justifyContent: 'start',\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  icon: {\r\n    maxWidth: theme.spacing(5),\r\n    marginBottom: theme.spacing(1),\r\n    marginLeft: theme.spacing(-1),\r\n  },\r\n}));\r\n\r\nconst Footer = () => {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const handleHomeRedirect = () => history?.replace('/reach_for_algo');\r\n  return (\r\n    <BottomNavigation className={classes.root}>\r\n      <BottomNavigationAction\r\n        icon={<HomeIcon />}\r\n        className={classes.icon}\r\n        onClick={handleHomeRedirect}\r\n      />\r\n    </BottomNavigation>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","import React, {\n  useState,\n  useEffect,\n} from 'react';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from 'react-router-dom';\n\nimport algosdk from 'algosdk';\n\nimport './App.css';\n// Pages\nimport LandingPage from './pages/LandingPage';\nimport ProfilePage from './pages/ProfilePage';\n// Custom\nimport MainTheme from './components/Theme';\nimport Nav from './components/NavComponent';\nimport Footer from './components/FooterComponent';\nimport {\n  getAlgoServer,\n  getIndexerServer,\n  getPureStakeAPIToken,\n} from '../src/utilities/algo';\n/**\n * Well this seemed to have gotten updated a bit.\n *  with custom rendering propd pages for user mngmt\n * @returns {Component}\n */\nconst App = () => {\n  const [account, setAccount] = useState(null);\n  const [ledger, setLedger] = useState('');\n  const [algodServer, setAlgodServer] = useState('');\n  const [indexerServer, setIndexerServer] = useState('');\n  const [token, setToken] = useState({\n    'X-API-KEY': '',\n  });\n  const port = '';\n\n  const [algodClient, setAlgodClient] = useState(null);\n  const [indexerClient, setIndexerClient] = useState(null);\n  // Configure Algod + Indexer Servers, & API token values\n  useEffect(() => {\n    if (ledger?.length > 0) {\n      if (algodServer?.length === 0) {\n        setAlgodServer(getAlgoServer(ledger, process.env));\n      }\n      if (indexerServer?.length === 0) {\n        setIndexerServer(getIndexerServer(ledger, process.env));\n      }\n      if (token['X-API-KEY']?.length === 0) {\n        setToken({\n          'X-API-KEY': getPureStakeAPIToken(ledger, process.env),\n        });\n      }\n    }\n  }, [ledger, algodServer, indexerServer, token]);\n  // Configure & Instantiate Aglod + Indexer Clients\n  useEffect(() => {\n    if ((algodClient === null\n      || algodClient === undefined)\n      && String(algodServer)?.length > 0\n    ) {\n      setAlgodClient(new algosdk.Algodv2(token, algodServer, port));\n    }\n    if ((indexerClient === null\n      || indexerClient === undefined)\n      && String(indexerServer)?.length > 0\n    ) {\n      setIndexerClient(new algosdk.Indexer(token, indexerServer, port));\n    }\n  }, [algodClient, algodServer, indexerClient, indexerServer, token]);\n\n  const handleSetAccount = (info) => setAccount(info);\n  /**\n   * Get Asset Information by ID\n   * @param {string | number} id assetId\n   * @returns {Object} assetInformation\n   */\n  const getAssetInformationByID = async (id) => {\n    const assetInfo = await indexerClient.lookupAssetByID(id).do();\n    return assetInfo;  \n  };\n  /**\n   * Get Account Information By Wallet Address\n   * @param {string} id wallet address\n   * @returns {Object} accountInformation\n   */\n  const getAccountInformationByID = async (id, round = null) => {\n    let accountInfo = {};\n    if (round !== null) {\n      accountInfo = await indexerClient.lookupAccountByID(id).round(round).do();\n    } else {\n      accountInfo = await indexerClient.lookupAccountByID(id).do();\n    }\n    return accountInfo;\n  };\n  /**\n   * Get Transaction Parameters\n   * @async\n   * @returns {Promise} algoClient.getTransactionParams().do()\n   */\n  const getTransactionParams = async () => {\n    try {\n      return await algodClient.getTransactionParams().do();\n    } catch (e) {\n      console.error(e);\n    }\n  };\n  const handleSelectLedgerChange = (e) => {\n    setLedger(e.target.value);\n  };\n  \n  return (\n    <MainTheme>\n      <Router>\n        <Nav\n          user={account}\n          ledger={ledger}\n          handleSelectLedgerChange={handleSelectLedgerChange}\n          handleGetAccountInfo={getAccountInformationByID}\n          handleSetAccount={handleSetAccount}\n          algodClient={algodClient}\n          indexerClient={indexerClient}\n        />\n        {account !== null && account !== undefined\n          ? (\n            <>\n              <div className=\"App container-fluid\">\n                <Switch>\n                  <Route\n                    path=\"/profile\"\n                    exact\n                    render={(props) => (\n                      <ProfilePage\n                        {...props}\n                        account={account}\n                        handleSetAccount={handleSetAccount}\n                        handleGetAccountInfo={getAccountInformationByID}\n                        handleGetAssetInfo={getAssetInformationByID}\n                        handleGetTransactionParams={getTransactionParams}\n                        algosdk={algosdk}\n                      />\n                    )}\n                  />\n                  <Route\n                    path=\"/reach_for_algo\"\n                    exact\n                    render={(props) => (\n                      <LandingPage\n                        {...props}\n                        user={account}\n                        handleGetAccountInfo={getAccountInformationByID}\n                        handleGetAssetInfo={getAssetInformationByID}\n                        handleGetTransactionParams={getTransactionParams}\n                        algosdk={algosdk}\n                        algodClient={algodClient}\n                        handleSetAccount={handleSetAccount}\n                        ledger={ledger}\n                        setLedger={setLedger}\n                        indexerClient={indexerClient}\n                      />\n                    )}\n                  />\n                </Switch>      \n              </div>\n              <Footer />\n            </>\n          ) : null}\n      </Router>\n    </MainTheme>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}