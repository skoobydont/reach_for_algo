{"version":3,"sources":["components/Theme.jsx","components/NavComponent.jsx","components/FooterComponent.jsx","components/AssetListComponent.jsx","pages/LandingPage.jsx","utilities/displayAddress.js","utilities/formatUtil.js","pages/ProductPage.jsx","pages/ProfilePage.jsx","pages/AccountPage.jsx","App.js","reportWebVitals.js","index.js"],"names":["MainTheme","children","darkMode","useMediaQuery","theme","createTheme","palette","type","ThemeProvider","CssBaseline","useStyles","makeStyles","bar","display","flexDirection","justifyContent","paddingLeft","spacing","paddingRight","Nav","classes","history","useHistory","AppBar","position","className","IconButton","edge","color","onClick","replace","account","root","icon","maxWidth","marginBottom","marginLeft","Footer","BottomNavigation","BottomNavigationAction","alignItems","card","minWidth","cardActions","padding","AssetListComponent","props","assets","algodClient","user","algosdk","SigningMethods","handleAssetByMnemonic","handleAssetByMyAlgoConnect","CardContent","Typography","Button","disabled","console","log","initAssetCollapse","result","Array","isArray","length","forEach","asset","index","useState","assetCollapse","setAssetCollapse","assetOptInCollaspe","setAssetOptInCollapse","obtainAssetAmount","setObtainAssetAmount","obtainAssetNote","setObtainAssetNote","assetObtainCollaspe","setAssetObtainCollapse","handleObtainAssetByMnemonicNoteChange","e","target","value","getTransactionParams","a","do","error","handleOptInAssetByMnemonic","assetId","undefined","current","alert","params","sender","address","recipient","optinTxn","makeAssetTransferTxnWithSuggestedParams","mnemonicToSecretKey","prompt","rawSignedTxn","signTxn","sk","txId","txID","toString","sendRawTransaction","trxSubmission","userHasOptedInToAsset","userAssets","uAsset","amount","handleObtainAssetByMnemonic","creator","revocationTarget","closeRemainderTo","note","encodeObj","transferTransaction","process","map","i","Card","component","Paper","name","CardActions","Object","keys","includes","String","TextField","onChange","handleObtainAssetByMnemonicAmountChange","total","placeholder","Collapse","in","timeout","unmountOnExit","paddingTop","margin","LandingPage","handleGetAccountInfo","handleGetAssetInfo","handleGetTransactionParams","useRef","setRefresh","useEffect","getWalletAssetsInfo","walletAddress","walletInfo","assetInfoRes","push","Promise","all","assetInfoResResolved","variant","displayAddress","addr","commaFormat","n","split","reverse","char","join","capitalize","s","substring","toUpperCase","header","top","deets","deetHeader","subheader","width","backgroundColor","primary","main","marginTop","borderRadius","boxShadow","topMobile","ProductPage","expandTL","setExpandTL","propInfo","location","state","activeProperty","mobile","goBack","style","propertyInfo","body","mobileTop","imgs","images","src","path","alt","Table","size","TableHead","TableRow","TableCell","Chip","vacant","label","TableBody","bath","bedrooms","propertyType","sqft","yearBuilt","numbers","noWrap","status","colSpan","tokenInfo","totalSold","investmentInfo","totalInvestment","totalAvailable","totalTokens","toFixed","Timeline","projectTimeline","sort","b","Date","date","tl","TimelineItem","TimelineOppositeContent","TimelineSeparator","TimelineDot","TimelineConnector","TimelineContent","Accordion","square","expanded","panel","newE","AccordionSummary","title","AccordionDetails","description","financialInfo","f","ProfilePage","handleSetAccount","refresh","setAssets","walletInput","setWalletInput","handleSubmit","preventDefault","handleSignOut","LinearProgress","message","onSubmit","Divider","AccountPage","App","algodServer","indexerServer","token","Algodv2","indexerClient","Indexer","setAccount","info","getAssetInformationByID","id","lookupAssetByID","assetInfo","getAccountInformationByID","lookupAccountByID","accountInfo","exact","render","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d5b106b9.chunk.js","sourcesContent":["import React from 'react';\r\nimport { createTheme, ThemeProvider } from '@material-ui/core/styles';\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\n\r\n\r\nconst MainTheme = ({ children }) => {\r\n  const darkMode = useMediaQuery('(prefers-color-scheme: dark)');\r\n  \r\n  const theme = createTheme({\r\n    palette: {\r\n      type: darkMode ? 'dark' : 'light',\r\n    }\r\n  });\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <CssBaseline />\r\n      {children}\r\n    </ThemeProvider>\r\n);\r\n}\r\n\r\nexport default MainTheme;\r\n","import React from 'react';\r\nimport { useHistory } from 'react-router';\r\n// MUI\r\nimport { makeStyles } from '@material-ui/core';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport AccountCircle from '@material-ui/icons/AccountCircle';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  bar: {\r\n    display: 'flex',\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n    paddingLeft: theme.spacing(2),\r\n    paddingRight: theme.spacing(2),\r\n  },\r\n}));\r\n\r\nconst Nav = () => {\r\n  // css\r\n  const classes = useStyles();\r\n  // to redirect\r\n  const history = useHistory();\r\n  // redirect handlers\r\n  const handleHomeRedirect = () => history.replace('/reach_for_algo');\r\n  const handleProfileRedirect = () => history.replace('/profile');\r\n  return (\r\n    <AppBar position=\"static\" className={classes.bar}>\r\n      <IconButton\r\n        edge=\"start\"\r\n        color=\"inherit\"\r\n        aria-label=\"home\"\r\n        onClick={handleHomeRedirect}\r\n      >\r\n        <HomeIcon />\r\n      </IconButton>\r\n      <IconButton\r\n        aria-label=\"account of current user\"\r\n        aria-controls=\"menu-appbar\"\r\n        className={classes.account}\r\n        aria-haspopup=\"true\"\r\n        onClick={handleProfileRedirect}\r\n        color=\"inherit\"\r\n      >\r\n        <AccountCircle />\r\n      </IconButton>\r\n    </AppBar>\r\n  )\r\n};\r\n\r\nexport default Nav;\r\n","import React from 'react';\r\nimport { useHistory } from 'react-router';\r\n// MUI\r\nimport BottomNavigation from '@material-ui/core/BottomNavigation';\r\nimport BottomNavigationAction from '@material-ui/core/BottomNavigationAction';\r\nimport { makeStyles } from '@material-ui/core';\r\nimport IconButton from '@material-ui/core/IconButton';\r\n// Icons\r\nimport HomeIcon from '@material-ui/icons/Home';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n    flexDirection: 'row',\r\n    justifyContent: 'start',\r\n  },\r\n  icon: {\r\n    maxWidth: theme.spacing(5),\r\n    marginBottom: theme.spacing(1),\r\n    marginLeft: theme.spacing(-1),\r\n  },\r\n}));\r\n\r\nconst Footer = () => {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const handleHomeRedirect = () => history?.replace('/reach_for_algo');\r\n  return (\r\n    <BottomNavigation className={classes.root}>\r\n      <BottomNavigationAction\r\n        icon={<HomeIcon />}\r\n        className={classes.icon}\r\n        onClick={handleHomeRedirect}\r\n      />\r\n    </BottomNavigation>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","import React, { useState } from 'react';\r\n// MUI\r\nimport Card from '@material-ui/core/Card';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/styles';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\n// Icons\r\nimport LockIcon from '@material-ui/icons/Lock';\r\nimport LockOpenIcon from '@material-ui/icons/LockOpen';\r\nimport ExpandLessIcon from '@material-ui/icons/ExpandLess';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\n// Classes\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n  },\r\n  card: {\r\n    maxWidth: theme.spacing(50),\r\n    minWidth: theme.spacing(30),\r\n  },\r\n  cardActions: {\r\n    display: 'flex',\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n    padding: `0px ${theme.spacing(1)}px`,\r\n  },\r\n}));\r\n\r\nconst AssetListComponent = (props) => {\r\n  const {\r\n    assets,\r\n    algodClient,\r\n    user,\r\n    algosdk,\r\n  } = props;\r\n  const classes = useStyles();\r\n\r\n  const SigningMethods = (props) => {\r\n    const {\r\n      handleAssetByMnemonic,\r\n      handleAssetByMyAlgoConnect,\r\n    } = props;\r\n    return (\r\n      <CardContent>\r\n        <Typography>\r\n          Transaction Signing Methods:\r\n        </Typography>\r\n        <Button\r\n          onClick={() => handleAssetByMnemonic()}\r\n        >\r\n          Mnemonic\r\n        </Button>\r\n        <Button\r\n          // TODO: implement & remove disabled\r\n          disabled={true}\r\n          onClick={() => handleAssetByMyAlgoConnect()}\r\n        >\r\n          MyAlgoConnect(TODO)\r\n        </Button>\r\n      </CardContent>\r\n    );\r\n  }\r\n  console.log('the user', user);\r\n  /**\r\n   * Generate Initial Asset Collapse Object\r\n   * @returns {Object} keys as asset index and value false (so all are default collapsed)\r\n   */\r\n  const initAssetCollapse = () => {\r\n    let result = {};\r\n    if (Array.isArray(assets) && assets?.length > 0) {\r\n      assets?.forEach(({ asset }) => {\r\n        result = {\r\n          ...result,\r\n          [`${asset?.index}`]: false,\r\n        }\r\n      });\r\n    }\r\n    return result;\r\n  }\r\n  const [assetCollapse, setAssetCollapse] = useState(initAssetCollapse());\r\n  const [assetOptInCollaspe, setAssetOptInCollapse] = useState(initAssetCollapse());\r\n  const [obtainAssetAmount, setObtainAssetAmount] = useState(0);\r\n  const [obtainAssetNote, setObtainAssetNote] = useState('');\r\n  const [assetObtainCollaspe, setAssetObtainCollapse] = useState(initAssetCollapse());\r\n  /**\r\n   * Handle Toggle Asset Collapse At Index Given\r\n   * @param {number} index the numerical index of the ASA\r\n   * @returns {null}\r\n   * @fires setAssetCollapse update attribute at passed index\r\n   */\r\n  const handleToggleAssetCollapse = (index) => {\r\n    if (Object.keys(assetCollapse).includes(String(index))) {\r\n      setAssetCollapse({\r\n        ...assetCollapse,\r\n        [index]: !assetCollapse[index],\r\n      });\r\n    }\r\n    return null;\r\n  }\r\n  const handleToggleOptInCollapse = (index) => {\r\n    if (Object.keys(assetOptInCollaspe).includes(String(index))) {\r\n      setAssetOptInCollapse({\r\n        ...assetOptInCollaspe,\r\n        [index]: !assetOptInCollaspe[index],\r\n      });\r\n    }\r\n    return null;\r\n  }\r\n  const handleToggleObtainAssetCollapse = (index) => {\r\n    if (Object.keys(assetObtainCollaspe).includes(String(index))) {\r\n      setAssetObtainCollapse({\r\n        ...assetObtainCollaspe,\r\n        [index]: !assetObtainCollaspe[index],\r\n      });\r\n    }\r\n    return null;\r\n  }\r\n  const handleObtainAssetByMnemonicAmountChange = (e) => {\r\n    setObtainAssetAmount(+e.target.value);\r\n  }\r\n  const handleObtainAssetByMnemonicNoteChange = (e) => {\r\n    setObtainAssetNote(e.target.value);\r\n  }\r\n  /**\r\n   * Get Transaction Parameters\r\n   * @async\r\n   * @returns {Promise} algoClient.getTransactionParams().do()\r\n   */\r\n   const getTransactionParams = async () => {\r\n    try {\r\n      return await algodClient.getTransactionParams().do();\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n  }\r\n  const handleOptInAssetByMnemonic = async (assetId) => {\r\n    if (user.current === undefined) {\r\n      alert('Please sign in before opting in');\r\n      return null;\r\n    }\r\n    try {\r\n      const params = await getTransactionParams();\r\n      // for opt-in, sender & recipient will be the same address\r\n      const sender = user.current.account.address;\r\n      const recipient = sender;\r\n      // We set revocationTarget to undefined as this is not a clawback operation\r\n      const revocationTarget = undefined;\r\n      // CloseReaminerTo is set to undefined as we are not closing out an asset\r\n      const closeRemainderTo = undefined;\r\n      const amount = 0;\r\n      // Construct transaction object\r\n      const optinTxn = algosdk.makeAssetTransferTxnWithSuggestedParams(\r\n        sender,\r\n        recipient,\r\n        closeRemainderTo,\r\n        revocationTarget,\r\n        amount,\r\n        undefined,\r\n        assetId,\r\n        params,\r\n      );\r\n      // Prompt user for mnemonic so we can sign with sk\r\n      const account = algosdk.mnemonicToSecretKey(prompt('Please enter your secret mnemonic:'));\r\n      console.log('account from mnemonic: ', account);\r\n\r\n      const rawSignedTxn = optinTxn.signTxn(account?.sk);\r\n      const txId = optinTxn.txID().toString();\r\n      console.log('Singed transaction with txId: %s', txId);\r\n      // submit transaction\r\n      const trxSubmission = await algodClient.sendRawTransaction(rawSignedTxn).do();\r\n      console.log('the transaction submission: ', trxSubmission);\r\n      // Wait for confirmation\r\n      // const confirmedTxn = await  TODO idk check pending transactions\r\n      return null;\r\n\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n  }\r\n  const userHasOptedInToAsset = (assetId, userAssets) => {\r\n    let result = false;\r\n    if (Array.isArray(userAssets) && userAssets?.length > 0) {\r\n      userAssets?.forEach((uAsset) => {\r\n        if (uAsset?.amount >= 0 && uAsset?.['asset-id'] === assetId) {\r\n          result = true;\r\n        }\r\n      });\r\n    }\r\n    return result;\r\n  }\r\n  const handleObtainAssetByMnemonic = async (asset) => {\r\n    try {\r\n      const params = await getTransactionParams();\r\n      console.log('oh boy sending transfer transaction by mnemonic| the params: ', params);\r\n  \r\n      const sender = asset?.params?.creator;\r\n      const recipient = user?.current?.account?.address;\r\n  \r\n      const revocationTarget = undefined;\r\n      const closeRemainderTo = undefined;\r\n  \r\n      const assetId = asset?.index;\r\n  \r\n      const amount = +obtainAssetAmount;\r\n      const note = algosdk.encodeObj(obtainAssetNote);\r\n      console.log('an obj of the trx: ', {\r\n        sender,\r\n        recipient,\r\n        closeRemainderTo,\r\n        revocationTarget,\r\n        amount,\r\n        note,\r\n        assetId,\r\n        params,\r\n      });\r\n      const transferTransaction = algosdk.makeAssetTransferTxnWithSuggestedParams(\r\n        sender,\r\n        recipient,\r\n        closeRemainderTo,\r\n        revocationTarget,\r\n        amount,\r\n        note,\r\n        assetId,\r\n        params,\r\n      );\r\n      // Prompt user for mnemonic so we can sign with sk\r\n      const account = algosdk.mnemonicToSecretKey(process.env.REACT_APP_BASE_WALLET_MNEMONIC);\r\n      console.log('account from mnemonic: ', account);\r\n      // const confirm = window.confirm()\r\n      const rawSignedTxn = transferTransaction.signTxn(account?.sk);\r\n      const txId = transferTransaction.txID().toString();\r\n      console.log('Singed transaction with txId: %s', txId);\r\n      // submit transaction\r\n      const trxSubmission = await algodClient.sendRawTransaction(rawSignedTxn).do();\r\n      console.log('the transaction submission: ', trxSubmission);\r\n      return trxSubmission;\r\n\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n  }\r\n  // https://dappradar.com/blog/algorand-dapp-development-2-standard-asset-management\r\n  \r\n  return (\r\n    <div className={classes.root}>\r\n      {assets?.map(({ asset }, i) => {\r\n        console.log('the asset: ', asset);\r\n        return (\r\n          <Card\r\n            component={Paper}\r\n            key={i}\r\n            className={classes.card}\r\n          >\r\n            <CardContent>\r\n              <Typography>\r\n                {asset?.params?.name}\r\n              </Typography>\r\n            </CardContent>\r\n            <CardActions className={classes.cardActions}>\r\n              <IconButton\r\n                onClick={() => handleToggleAssetCollapse(asset?.index)}\r\n              >\r\n                {assetCollapse[asset?.index]\r\n                  ? <ExpandLessIcon />\r\n                  : <ExpandMoreIcon />}\r\n              </IconButton>\r\n              {userHasOptedInToAsset(asset?.index, user?.current?.account?.assets)\r\n                ? (\r\n                  <>\r\n                    <TextField\r\n                      type=\"number\"\r\n                      onChange={(e) => handleObtainAssetByMnemonicAmountChange(e, asset?.params?.total)}\r\n                    />\r\n                    <TextField\r\n                      placeholder='Note (optional)'\r\n                      onChange={handleObtainAssetByMnemonicNoteChange}\r\n                    />\r\n                    <Button\r\n                      onClick={() => handleToggleObtainAssetCollapse(asset?.index)}\r\n                    >\r\n                      Obtain Asset\r\n                    </Button>\r\n                  </>\r\n                ) : (\r\n                  <Button\r\n                    disabled={\r\n                      user.current === undefined\r\n                      || Object.keys(user.current).includes('message')\r\n                    }\r\n                    onClick={() => handleToggleOptInCollapse(asset?.index)}\r\n                  >\r\n                    Opt-In\r\n                  </Button>\r\n                )}\r\n            </CardActions>\r\n            {/** Transaction Opt In Methods (mnemonic, myalgoconnect, etc?) */}\r\n            <Collapse\r\n              in={assetOptInCollaspe[asset?.index]}\r\n              timeout=\"auto\"\r\n              unmountOnExit\r\n              className={classes.card}\r\n            >\r\n              <SigningMethods\r\n                handleAssetByMnemonic={() => handleOptInAssetByMnemonic(asset?.index)}\r\n              />\r\n            </Collapse>\r\n            <Collapse\r\n              in={assetObtainCollaspe[asset?.index]}\r\n              timeout=\"auto\"\r\n              unmountOnExit\r\n              className={classes.card}\r\n            >\r\n              <SigningMethods\r\n                handleAssetByMnemonic={() => handleObtainAssetByMnemonic(asset)}\r\n              />\r\n            </Collapse>\r\n            <Collapse\r\n              in={assetCollapse[asset?.index]}\r\n              timeout=\"auto\"\r\n              unmountOnExit\r\n              className={classes.card}\r\n            >\r\n              <CardContent>\r\n                <Typography>Show Collapsed Info For Asset At Index: {asset?.index}</Typography>\r\n              </CardContent>\r\n            </Collapse>\r\n          </Card>\r\n        );\r\n      })}\r\n    </div>\r\n  )  \r\n}\r\n\r\nexport default AssetListComponent;\r\n","import React, { useRef, useEffect, useState } from 'react';\r\n// MUI\r\nimport { makeStyles } from '@material-ui/core';\r\nimport Typography from '@material-ui/core/Typography';\r\n// Custom\r\nimport AssetListComponent from '../components/AssetListComponent';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    paddingTop: '8px',\r\n    justifyContent: 'center',\r\n    '& .MuiInputBase-root': {\r\n      margin: 'auto',\r\n      maxWidth: theme.spacing(35),\r\n    },\r\n  },\r\n}));\r\n\r\nconst LandingPage = (props) => {\r\n  const classes = useStyles();\r\n  const {\r\n    user,\r\n    handleGetAccountInfo,\r\n    handleGetAssetInfo,\r\n    handleGetTransactionParams,\r\n    algosdk,\r\n    algodClient,\r\n  } = props;\r\n\r\n  const assets = useRef();\r\n  const [refresh, setRefresh] = useState(false);\r\n\r\n  \r\n  // get assets from main wallet address\r\n  useEffect(() => {\r\n    /**\r\n     * Get Wallet & Asset Info\r\n     * @param {string} walletAddress the wallet you want info for\r\n     * @returns {Object} account obj & current round\r\n     * @fires setAssets with any assets associated with the wallet address (maybe\r\n     *  this changes to only display assets that match what main wallet has) (\r\n     *  only want to show assets in wallet that are also in main wallet i guess)\r\n     */\r\n    const getWalletAssetsInfo = async (walletAddress) => {\r\n      const walletInfo = await handleGetAccountInfo(walletAddress);\r\n      if (typeof walletInfo === 'object' && Object.keys(walletInfo).includes('account')) {\r\n        const assetInfoRes = [];\r\n        if (Array.isArray(walletInfo.account?.assets)) {\r\n          walletInfo.account.assets.forEach((asset) => {\r\n            assetInfoRes.push(handleGetAssetInfo(asset['asset-id']));\r\n          });\r\n        }\r\n        console.log('asset info res', assetInfoRes);\r\n        const assetInfoResResolved = await Promise.all(assetInfoRes);\r\n        console.log('asset info res after promise all', assetInfoResResolved);\r\n        if (Array.isArray(assetInfoResResolved) && assetInfoResResolved?.length > 0) {\r\n          assets.current = assetInfoResResolved;\r\n        }\r\n      }\r\n      setRefresh(true);\r\n      return walletInfo;\r\n    } \r\n    if (assets.current === undefined) {\r\n      // get assets from main wallet\r\n      getWalletAssetsInfo(process.env.REACT_APP_BASE_WALLET_ADDRESS);\r\n    }\r\n  }, [assets, handleGetAccountInfo, handleGetAssetInfo]);\r\n  console.log('the assets: ', assets);\r\n  return (\r\n    <div className={classes.root}>\r\n      <Typography variant=\"subtitle1\" color=\"primary\">\r\n        Real Estate For The Digital Age\r\n      </Typography>\r\n      {Array.isArray(assets.current) && assets.current?.length\r\n        ? (\r\n          <div>\r\n            <AssetListComponent\r\n              assets={assets.current}\r\n              algodClient={algodClient}\r\n              user={user}\r\n              algosdk={algosdk}\r\n            />\r\n          </div>\r\n        ) : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LandingPage;\r\n","/**\r\n * Display Address\r\n * @param {object} address \r\n * @returns {string} formatted address string based on passed obj\r\n */\r\nconst displayAddress = (address) => {\r\n  if (!address) return '';\r\n  if (Object?.keys(address) < 1) return address;\r\n  let result = '';\r\n  Object.keys(address).map((addr, i) => (\r\n    result += `${\r\n      address[addr]?.length > 0\r\n        ? i > 0\r\n          ? `, ${address[addr]}`\r\n          : `${address[addr]}`\r\n        : ''\r\n    }`\r\n  ));\r\n  return result;\r\n}\r\n\r\nexport default displayAddress;\r\n","/**\r\n * Comma Format\r\n * @param {Number} n to format\r\n * @returns {String} number value with commas\r\n */\r\nexport const commaFormat = (n) => {\r\n  if (!n) return n;\r\n  return String(n)?.split('')?.reverse()?.map((char, i) => {\r\n    if (i % 3 === 0 && i !== 0) {\r\n      return `${char},`;\r\n    }\r\n    return char;\r\n  })?.reverse()?.join('');\r\n}\r\n/**\r\n * Capitalize\r\n * @param {string} s some camel case string probably\r\n * @returns {string} Capitalize Case String With Spaces\r\n */\r\nexport const capitalize = (s) => {\r\n  const upperCase = s.substring(0, 1).toUpperCase() + s.substring(1);\r\n  const reg = /([A-Z])/g;\r\n  return upperCase.replace(reg, ' $1');\r\n}\r\n\r\nexport const dollarFormat = (n) => `$${n}`;\r\n\r\nexport default dollarFormat;\r\n","import React, { useState } from 'react';\r\nimport { useHistory } from 'react-router';\r\n// MUI Core\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Card from '@material-ui/core/Card';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Accordion from '@material-ui/core/Accordion';\r\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\r\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\r\n// Lab\r\nimport Timeline from '@material-ui/lab/Timeline';\r\nimport TimelineItem from '@material-ui/lab/TimelineItem';\r\nimport TimelineSeparator from '@material-ui/lab/TimelineSeparator';\r\nimport TimelineConnector from '@material-ui/lab/TimelineConnector';\r\nimport TimelineContent from '@material-ui/lab/TimelineContent';\r\nimport TimelineOppositeContent from '@material-ui/lab/TimelineOppositeContent';\r\nimport TimelineDot from '@material-ui/lab/TimelineDot';\r\n// Icons\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\n// Utils\r\nimport displayAddress from '../utilities/displayAddress';\r\nimport { capitalize } from '../utilities/formatUtil';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    paddingLeft: theme.spacing(2),\r\n    paddingRight: theme.spacing(2),\r\n  },\r\n  header: {\r\n    display: 'flex',\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n    '& button.MuiIconButton-root': {\r\n      paddingLeft: theme.spacing(0),\r\n    },\r\n  },\r\n  top: {\r\n    display: 'flex',\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-around',\r\n  },\r\n  deets: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n  },\r\n  deetHeader: {\r\n    display: 'flex',\r\n    flexDirection: 'row',\r\n    alignItems: 'baseline',\r\n  },\r\n  subheader: {\r\n    width: '100%',\r\n    backgroundColor: theme.palette.primary.main,\r\n    padding: theme.spacing(1),\r\n    marginTop: theme.spacing(4),\r\n    borderRadius: theme.spacing(1),\r\n    boxShadow: '0px 2px 6px #FFF',\r\n  },\r\n  topMobile: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n  },\r\n}));\r\n\r\nconst ProductPage = () => {\r\n  const history = useHistory();\r\n  const classes = useStyles();\r\n  const [expandTL, setExpandTL] = useState('');\r\n  const propInfo = history?.location?.state?.activeProperty;\r\n  /**\r\n   * Mobile? maxWidth: 415px\r\n   * @type {boolean} - is the current viewpoint mobile?\r\n   */\r\n  const mobile = useMediaQuery('(max-width:415px)');\r\n  /**\r\n   * Handle Expanding Timeline Accordions\r\n   * @param {int} panel panel index\r\n   * @fires setExpandTL to new panel or close\r\n   */\r\n  const handleExpandTL = (panel) => (e, newE) => setExpandTL(newE ? panel : false);\r\n  // console.log('prop info', propInfo);\r\n  return (\r\n    <div className={classes.root}>\r\n      <div className={classes.header}>\r\n        <IconButton onClick={() => history.goBack()}>\r\n          <ArrowBackIcon />\r\n        </IconButton>\r\n        <Typography variant=\"h6\" component=\"h2\" style={{ margin: 'auto' }}>\r\n          {displayAddress(history?.location?.state?.activeProperty?.propertyInfo?.address)}\r\n        </Typography>\r\n      </div>\r\n      <div className={classes.body}>\r\n        <div className={\r\n          mobile ? classes.mobileTop : classes.top\r\n        }>\r\n          <div className={classes.imgs}>\r\n            {/* TODO: img file paths: meh good enough for now */}\r\n            {propInfo?.images ? (\r\n              <>\r\n                <img\r\n                  src={`${process.env.REACT_APP_URL_BASE}/${propInfo?.images?.[0]?.path}`}\r\n                  alt={`${displayAddress(\r\n                    propInfo?.propertyInfo.address\r\n                  )}-pics`}\r\n                />\r\n              </>\r\n            ) : null}\r\n          </div>\r\n          <div className={classes.deets}>\r\n            <Table size=\"small\">\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell>\r\n                    <b>Property Info</b>\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    <Chip\r\n                      color={\r\n                        propInfo?.propertyInfo.vacant === 'occupied'\r\n                          ? 'primary' : 'secondary'\r\n                      }\r\n                      label={\r\n                        propInfo?.propertyInfo.vacant === 'occupied'\r\n                          ? 'Occupied' : 'Vacant'}\r\n                    />\r\n                  </TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                <TableRow>\r\n                  <TableCell>\r\n                    <b>Occupancy</b>\r\n                  </TableCell>\r\n                  <TableCell>{propInfo?.propertyInfo.vacant}</TableCell>\r\n                </TableRow>\r\n                <TableRow>\r\n                  <TableCell>\r\n                    <b>Bath</b>\r\n                  </TableCell>\r\n                  <TableCell>{propInfo?.propertyInfo.bath}</TableCell>\r\n                </TableRow>\r\n                <TableRow>\r\n                  <TableCell>\r\n                    <b>Bedroom(s)</b>\r\n                  </TableCell>\r\n                  <TableCell>{propInfo?.propertyInfo.bedrooms}</TableCell>\r\n                </TableRow>\r\n                <TableRow>\r\n                  <TableCell>\r\n                    <b>Type</b>\r\n                  </TableCell>\r\n                  <TableCell>{propInfo?.propertyInfo.propertyType}</TableCell>\r\n                </TableRow>\r\n                <TableRow>\r\n                  <TableCell>\r\n                    <b>Sqft</b>\r\n                  </TableCell>\r\n                  <TableCell>{propInfo?.propertyInfo.sqft}</TableCell>\r\n                </TableRow>\r\n                <TableRow>\r\n                  <TableCell>\r\n                    <b>Year Built</b>\r\n                  </TableCell>\r\n                  <TableCell>{propInfo?.propertyInfo.yearBuilt}</TableCell>\r\n                </TableRow>\r\n              </TableBody>\r\n            </Table>\r\n          </div>\r\n        </div>\r\n        <div className={classes.numbers}>\r\n          <h4 className={classes.subheader}>Quick Numbers</h4>\r\n          <Table size=\"small\">\r\n            <TableBody>\r\n              <TableRow>\r\n                <TableCell noWrap>\r\n                  <b>Token Info</b>\r\n                </TableCell>\r\n                <TableCell>\r\n                  <Chip\r\n                    label={propInfo?.status}\r\n                    color={propInfo?.status !== 'sold out'\r\n                      ? 'primary' : 'secondary'}\r\n                  />\r\n                </TableCell>\r\n                <TableCell colSpan={2}>\r\n                  <b>Investment Info</b>\r\n                </TableCell>\r\n              </TableRow>\r\n              <TableRow>\r\n                <TableCell>\r\n                  # Sold\r\n                </TableCell>\r\n                <TableCell>\r\n                  {propInfo.tokenInfo.totalSold}\r\n                </TableCell>\r\n                <TableCell>\r\n                  Total Investment\r\n                </TableCell>\r\n                <TableCell>\r\n                  {propInfo.investmentInfo.totalInvestment}\r\n                </TableCell>\r\n              </TableRow>\r\n              <TableRow>\r\n                <TableCell>\r\n                  # Available\r\n                </TableCell>\r\n                <TableCell>\r\n                  {propInfo.tokenInfo.totalAvailable\r\n                    - propInfo.tokenInfo.totalSold}\r\n                </TableCell>\r\n                <TableCell>\r\n                  $ / Token\r\n                </TableCell>\r\n                <TableCell>\r\n                  {`$${+(propInfo.investmentInfo.totalInvestment\r\n                    / propInfo.investmentInfo.totalTokens).toFixed(2)}`}\r\n                </TableCell>\r\n              </TableRow>\r\n            </TableBody>\r\n          </Table>\r\n        </div>\r\n        <div>\r\n          <h4 className={classes.subheader}>Project Timeline</h4>\r\n          <Timeline>\r\n            {Array.isArray(propInfo?.projectTimeline) ? (\r\n              propInfo.projectTimeline?.sort((a, b) => \r\n                new Date(a.date) < new Date(b.date)\r\n              )?.map((tl, i) => (\r\n                <TimelineItem>\r\n                  <TimelineOppositeContent style={{ marginTop: '12px' }}>\r\n                    {tl?.date}\r\n                  </TimelineOppositeContent>\r\n                  <TimelineSeparator style={{ marginTop: '12px' }}>\r\n                    <TimelineDot\r\n                      color={i === 0\r\n                        ? 'secondary' : 'primary'}\r\n                    />\r\n                    {i !== propInfo.projectTimeline.length - 1\r\n                      ? <TimelineConnector /> : null}\r\n                  </TimelineSeparator>\r\n                  <TimelineContent>\r\n                    <Accordion\r\n                      square\r\n                      expanded={expandTL === i}\r\n                      onChange={handleExpandTL(i)}\r\n                    >\r\n                      <AccordionSummary>\r\n                        <b>{tl?.title}</b>\r\n                      </AccordionSummary>\r\n                      <AccordionDetails>\r\n                        {tl?.description}\r\n                      </AccordionDetails>\r\n                    </Accordion>\r\n                  </TimelineContent>\r\n                </TimelineItem>\r\n              ))\r\n            ) : null}\r\n          </Timeline>\r\n        </div>\r\n        <div>\r\n          <h4 className={classes.subheader}>More Numbers</h4>\r\n          <Table size=\"small\">\r\n            {propInfo?.financialInfo ? (\r\n              Object.keys(propInfo.financialInfo).map((f, i) => (\r\n                <TableRow>\r\n                  {i % 2 === 0 ? (\r\n                    <>\r\n                      <TableCell>\r\n                        {capitalize(Object.keys(propInfo.financialInfo)[i + 1])}\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        {propInfo.financialInfo[Object.keys(propInfo.financialInfo)[i + 1]]}\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        {capitalize(f)}\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        {propInfo.financialInfo[f]}\r\n                      </TableCell>\r\n                    </>\r\n                  ) : null}\r\n                </TableRow>\r\n              ))\r\n            ) : null}\r\n          </Table>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ProductPage;\r\n","import React, { useState, useEffect } from 'react';\r\n// MUI\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport Divider from '@material-ui/core/Divider';\r\n// Util\r\nimport { commaFormat } from '../utilities/formatUtil';\r\n\r\nconst ProfilePage = (props) => {\r\n  const {\r\n    account,\r\n    handleSetAccount,\r\n    algosdk,\r\n    handleGetAccountInfo,\r\n    handleGetAssetInfo,\r\n    handleGetTransactionParams,\r\n  } = props;\r\n  // https://dappradar.com/blog/algorand-dapp-development-2-standard-asset-management\r\n  const [refresh, setRefresh] = useState(false);\r\n  const [assets, setAssets] = useState(null);\r\n  const [walletInput, setWalletInput] = useState('');\r\n  /**\r\n   * Get Wallet & Asset Info\r\n   * @param {string} walletAddress the wallet you want info for\r\n   * @returns {Object} account obj & current round\r\n   * @fires setAssets with any assets associated with the wallet address (maybe\r\n   *  this changes to only display assets that match what main wallet has) (\r\n   *  only want to show assets in wallet that are also in main wallet i guess)\r\n   */\r\n  const getWalletAssetsInfo = async (walletAddress) => {\r\n    const walletInfo = await handleGetAccountInfo(walletAddress);\r\n    if (typeof walletInfo === 'object' && Object.keys(walletInfo).includes('account')) {\r\n      const assetInfoRes = [];\r\n      if (Array.isArray(walletInfo.account?.assets)) {\r\n        walletInfo.account.assets.forEach((asset) => {\r\n          assetInfoRes.push(handleGetAssetInfo(asset['asset-id']));\r\n        });\r\n      }\r\n      console.log('asset info res', assetInfoRes);\r\n      const assetInfoResResolved = await Promise.all(assetInfoRes);\r\n      console.log('asset info res after promise all', assetInfoResResolved);\r\n      if (Array.isArray(assetInfoResResolved) && assetInfoResResolved?.length > 0) {\r\n        setAssets(assetInfoResResolved);\r\n      }\r\n    }\r\n    setRefresh(true);\r\n    return walletInfo;\r\n  }\r\n\r\n  // const getTransactionParams = async () => {\r\n  //   const tParams = await handleGetTransactionParams();\r\n  //   console.log('some transaction params', tParams);\r\n  //   return tParams;\r\n  // }\r\n\r\n  const handleSubmit = async (e) => {\r\n    e?.preventDefault();\r\n    const walletInfo = await getWalletAssetsInfo(walletInput);\r\n    console.log('handle submit wallet info: ', walletInfo);\r\n    handleSetAccount(walletInfo);\r\n  }\r\n\r\n  const handleSignOut = () => {\r\n    setRefresh(true);\r\n    setAssets(null);\r\n    handleSetAccount(undefined);\r\n  };\r\n\r\n  console.log('account', account);\r\n  console.log('the assets', assets);\r\n\r\n  useEffect(() => {\r\n    if (refresh) {\r\n      setRefresh(false);\r\n    }\r\n  }, [refresh]);\r\n\r\n  useEffect(() => {\r\n    if (assets === null && account?.current?.account !== undefined) {\r\n      getWalletAssetsInfo(account?.current?.account?.address);\r\n    }\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [assets]);\r\n\r\n  return (\r\n    <div>\r\n      <>\r\n        {refresh\r\n          ? <LinearProgress />\r\n          : account.current !== undefined\r\n            ? Object?.keys(account.current)?.includes('account')\r\n              ? (\r\n                <>\r\n                  <Typography>\r\n                    My Account: {account?.current?.account?.address}\r\n                  </Typography>\r\n                  <Typography>\r\n                    {commaFormat(account.current.account?.amount)} microAlgos\r\n                  </Typography>\r\n                  <Button onClick={handleSignOut}>Sign Out</Button>\r\n                </>\r\n              )\r\n              : Object.keys(account.current)?.includes('message')\r\n                ? (\r\n                  <>\r\n                    <Typography>\r\n                      {account.current?.message}\r\n                    </Typography>\r\n                    <Button onClick={handleSignOut}>Sign Out</Button>\r\n                  </>\r\n                )\r\n                : null\r\n            : (\r\n              <form onSubmit={handleSubmit}>\r\n                <Typography>Login With Wallet Address</Typography>\r\n                <TextField\r\n                  value={walletInput}\r\n                  onChange={(e) => setWalletInput(e.target.value)}\r\n                />\r\n                <Button type=\"submit\">Submit</Button>\r\n              </form>\r\n            )}\r\n        {/* <Button\r\n          onClick={() => getWalletAssetsInfo(process.env.REACT_APP_BASE_WALLET_ADDRESS)}\r\n          variant=\"contained\"\r\n        >\r\n          Get Assets\r\n        </Button>\r\n        <Button\r\n          onClick={() => getTransactionParams()}\r\n        >\r\n          Transaction Params\r\n        </Button> */}\r\n        {Array.isArray(assets) && assets?.length > 0\r\n          ? (\r\n            <div>\r\n              <Typography>My Assets</Typography>\r\n              <Divider />\r\n              {assets?.map(({ asset }, i) => (\r\n                <div key={i}>\r\n                  <Typography>{asset?.params?.name}</Typography>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          ) : null}\r\n      </>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ProfilePage;\r\n","const AccountPage = () => {\r\n  return (\r\n    <div>Account Page</div>\r\n  );\r\n};\r\n\r\nexport default AccountPage;\r\n","\nimport React, { useState, useCallback, useRef } from 'react';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from 'react-router-dom';\n\nimport algosdk from 'algosdk';\n// import * as reach from '@reach-sh/stdlib/ALGO';\n\nimport './App.css';\nimport MainTheme from './components/Theme';\nimport Nav from './components/NavComponent';\nimport Footer from './components/FooterComponent';\nimport LandingPage from './pages/LandingPage';\nimport ProductPage from './pages/ProductPage';\nimport ProfilePage from './pages/ProfilePage';\nimport AccountPage from './pages/AccountPage';\n/**\n * Well this seemed to have gotten updated a bit.\n *  with custom rendering propd pages for user mngmt\n * @returns {Component}\n */\nconst App = () => {\n  // Begin SDK Setup\n  const algodServer = `${process.env.REACT_APP_ALGOD_SERVER_URL}`\n  const indexerServer = `${process.env.REACT_APP_INDEXER_URL}`\n  const token = { 'X-API-Key': `${process.env.REACT_APP_PURESTAKE_API_KEY}` }\n  const port = '';\n  // TODO: incorporate creating asa & indexing assets\n  // ie https://purestake.github.io/algosigner-dapp-example/\n  const algodClient = new algosdk.Algodv2(token, algodServer, port);\n  const indexerClient = new algosdk.Indexer(token, indexerServer, port);\n\n  const account = useRef();\n  /**\n   * Set Account & Update Ref\n   * @param {Object} info the account info object\n   */\n  const setAccount = (info) => {\n    // console.log('account.current ', account.current);\n    account.current = info;\n  }\n  /**\n   * Get Asset Information by ID\n   * @param {string | number} id assetId\n   * @returns {Object} assetInformation\n   */\n  const getAssetInformationByID = async (id) => {\n    const assetInfo = await indexerClient.lookupAssetByID(id).do();\n    // console.log('some asset info', assetInfo);\n    return assetInfo;  \n  }\n  /**\n   * Get Account Information By Wallet Address\n   * @param {string} id wallet address\n   * @returns {Object} accountInformation\n   */\n  const getAccountInformationByID = async (id) => {\n    const accountInfo = await indexerClient.lookupAccountByID(id).do();\n    return accountInfo;\n  }\n  /**\n   * Get Transaction Parameters\n   * @async\n   * @returns {Promise} algoClient.getTransactionParams().do()\n   */\n  const getTransactionParams = async () => {\n    try {\n      return await algodClient.getTransactionParams().do();\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  \n  return (\n    <MainTheme>\n      <Router>\n        <Nav />\n        <div className=\"App container-fluid\">\n          <Switch>\n            <Route\n              path=\"/profile\"\n              exact\n              render={(props) => (\n                <ProfilePage\n                  {...props}\n                  account={account}\n                  handleSetAccount={setAccount}\n                  handleGetAccountInfo={getAccountInformationByID}\n                  handleGetAssetInfo={getAssetInformationByID}\n                  handleGetTransactionParams={getTransactionParams}\n                  algosdk={algosdk}\n                />\n              )}\n            />\n            <Route\n              path=\"/account\"\n              exact\n              render={(props) => (\n                <AccountPage\n                  {...props}\n                  user={account}\n                />\n              )}\n            />\n            <Route\n              path=\"/property/:id\"\n              exact\n              render={(props) => (\n                <ProductPage\n                  {...props}\n                  user={account}\n                />\n              )}\n            />\n            <Route\n              path=\"/reach_for_algo\"\n              exact\n              render={(props) => (\n                <LandingPage\n                  {...props}\n                  user={account}\n                  handleGetAccountInfo={getAccountInformationByID}\n                  handleGetAssetInfo={getAssetInformationByID}\n                  handleGetTransactionParams={getTransactionParams}\n                  algosdk={algosdk}\n                  algodClient={algodClient}\n                />\n              )}\n            />\n          </Switch>      \n        </div>\n        <Footer />\n      </Router>\n    </MainTheme>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}